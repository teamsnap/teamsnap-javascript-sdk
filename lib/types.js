// Generated by CoffeeScript 1.11.1
var i, len, plural, pluralLookup, singularLookup, teamTypes, teamsnap, type, typeLookup, types;

teamsnap = exports;

types = ['user', 'advertisement', 'assignment', 'availability', 'batchInvoice', 'batchInvoiceLineItem', 'broadcastAlert', 'broadcastEmail', 'broadcastEmailAttachment', 'contact', 'contactEmailAddress', 'contactPhoneNumber', 'customDatum', 'customField', 'divisionAggregate', 'leagueCustomDatum', 'leagueCustomField', 'divisionContact', 'divisionContactEmailAddress', 'divisionContactPhoneNumber', 'divisionEvent', 'divisionLocation', 'divisionMember', 'divisionMemberEmailAddress', 'divisionMemberPhoneNumber', 'divisionMemberPreferences', 'divisionStore', 'divisionTeamStanding', 'divisionPreferences', 'division', 'event', 'eventStatistic', 'forecast', 'forumPost', 'forumSubscription', 'forumTopic', 'leagueRegistrantDocument', 'invoice', 'invoiceLineItem', 'invoiceTransaction', 'location', 'member', 'memberAssignment', 'memberBalance', 'memberEmailAddress', 'memberFile', 'memberLink', 'memberPayment', 'memberPhoneNumber', 'memberPhoto', 'memberPreferences', 'memberStatistic', 'memberRegistrationSignup', 'message', 'messageDatum', 'opponent', 'opponentResults', 'partnerPreferences', 'partnerUserPreferences', 'paymentNote', 'plan', 'registrationForm', 'registrationFormLineItemOption', 'registrationFormLineItem', 'smsGateway', 'sponsor', 'statistic', 'statisticAggregate', 'statisticDatum', 'statisticGroup', 'sport', 'team', 'teamFee', 'teamMedium', 'teamMediumComment', 'teamMediaGroup', 'teamName', 'teamPaypalPreferences', 'teamPhoto', 'teamPreferences', 'teamPublicSite', 'teamResults', 'teamStatistic', 'teamStore', 'timeZone', 'trackedItem', 'trackedItemStatus'];

teamTypes = types.slice();

teamTypes.remove = function(type) {
  var index;
  index = this.indexOf(type);
  if (index !== -1) {
    this.splice(index, 1);
  }
  return this;
};

teamTypes.remove('user').remove('plan').remove('smsGateway').remove('sport').remove('timeZone');

typeLookup = {};

singularLookup = {};

pluralLookup = {
  memberPreferences: 'membersPreferences',
  divisionMemberPreferences: 'divisionMembersPreferences',
  divisionPreferences: 'divisionsPreferences',
  opponentResults: 'opponentsResults',
  partnerPreferences: 'partnersPreferences',
  statisticDatum: 'statisticData',
  messageDatum: 'messageData',
  teamMedium: 'teamMedia',
  teamPaypalPreferences: 'teamsPaypalPreferences',
  teamPreferences: 'teamsPreferences',
  teamResults: 'teamsResults',
  customDatum: 'customData',
  leagueCustomDatum: 'leagueCustomData',
  smsGateway: 'smsGateways',
  partnerUserPreferences: 'partnersUserPreferences'
};

for (i = 0, len = types.length; i < len; i++) {
  type = types[i];
  plural = pluralLookup[type] || (function() {
    switch (type.slice(-1)) {
      case 'y':
        return type.slice(0, -1) + 'ies';
      case 's':
        return type + 'es';
      default:
        return type + 's';
    }
  })();
  typeLookup[type] = type;
  typeLookup[plural] = type;
  singularLookup[plural] = type;
  pluralLookup[type] = plural;
}

teamsnap.isPluralType = function(name) {
  return singularLookup.hasOwnProperty(name);
};

teamsnap.isSingularType = function(name) {
  return pluralLookup.hasOwnProperty(name);
};

teamsnap.hasType = function(type) {
  return typeLookup[type] !== void 0;
};

teamsnap.getTypes = function() {
  return types.slice();
};

teamsnap.getTeamTypes = function() {
  return teamTypes.slice();
};

teamsnap.getPluralType = function(name) {
  return pluralLookup[name];
};

teamsnap.getSingularType = function(name) {
  return singularLookup[name];
};

teamsnap.getType = function(name) {
  return typeLookup[name];
};

teamsnap.camelcaseType = function(type) {
  return type.replace(/[-_]+(\w)/g, function(_, char) {
    return char.toUpperCase();
  });
};

teamsnap.underscoreType = function(type) {
  return type.replace(/[A-Z]/g, function(char) {
    return '_' + char.toLowerCase();
  });
};
