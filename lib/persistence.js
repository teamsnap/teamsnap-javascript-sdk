// Generated by CoffeeScript 1.11.1
var Item, MetaList, ScopedCollection, camelize, copy, linking, lookup, modifyModel, modifySDK, promises, ref, revertModel, revertSDK, revertWrapMethod, types, wrapMethod, wrapSave,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

promises = require('./promises');

linking = require('./linking');

types = require('./types');

Item = require('./model').Item;

ref = require('./model'), ScopedCollection = ref.ScopedCollection, Item = ref.Item, MetaList = ref.MetaList;

lookup = null;

exports.enablePersistence = function(cachedItemData) {
  var initialItems;
  if (lookup) {
    return;
  }
  if (!this.collections) {
    throw new TSError('You must auth() and loadCollections() before enabling persistence.');
  }
  this.persistenceEnabled = true;
  lookup = {};
  modifyModel();
  modifySDK(this);
  initialItems = [];
  initialItems.push.apply(initialItems, this.plans);
  initialItems.push.apply(initialItems, this.smsGateways);
  initialItems.push.apply(initialItems, this.sports);
  initialItems.push.apply(initialItems, this.timeZones);
  linking.linkItems(this.plans.concat(this.sports), lookup);
  if (cachedItemData) {
    return Item.fromArray(this.request, cachedItemData);
  }
};

exports.disablePersistence = function() {
  if (!lookup) {
    return;
  }
  this.persistenceEnabled = false;
  linking.unlinkItems(Object.keys(lookup).map(function(href) {
    return lookup[href];
  }), lookup);
  lookup = null;
  revertModel();
  revertSDK(this);
  return this;
};

exports.findItem = function(href) {
  return lookup != null ? lookup[href] : void 0;
};

exports.getAllItems = function() {
  return Object.keys(lookup).map(function(href) {
    return lookup[href];
  });
};

exports.unlinkTeam = function(team) {
  var i, items, len, plural, ref1, ref2, teamType, users, value;
  items = [team];
  users = (ref1 = team.members) != null ? ref1.filter(function(member) {
    return member.user;
  }).map(function(member) {
    return member.user;
  }) : void 0;
  ref2 = this.getTeamTypes();
  for (i = 0, len = ref2.length; i < len; i++) {
    teamType = ref2[i];
    plural = this.getPluralType(teamType);
    if ((value = team[plural]) && value.length) {
      items.push.apply(items, value);
    } else if ((value = team[teamType])) {
      items.push(value);
    }
  }
  return unlinkItems(items);
};

modifyModel = function() {
  wrapMethod(Item, 'fromArray', function(fromArray) {
    return function(request, array) {
      var items;
      items = fromArray.call(this, request, array);
      return linking.linkItems(items, lookup).map(function(item) {
        return item.saveState();
      });
    };
  });
  wrapMethod(ScopedCollection.prototype, 'save', function(save) {
    return function(item, callback) {
      return save.call(this, item).then(function(item) {
        if (Array.isArray(item)) {
          return item.map(function(item) {
            linking.linkItem(item, lookup);
            return item.saveState();
          });
        } else {
          linking.linkItem(item, lookup);
          return item.saveState();
        }
      }).callback(callback);
    };
  });
  wrapMethod(Item.prototype, 'delete', function(deleteItem) {
    return function(params, callback) {
      var item;
      item = this;
      linking.unlinkItem(item, lookup);
      return deleteItem.call(this, params).fail(function(err) {
        linking.linkItem(item, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(Item, 'create', function(create) {
    return function(request, data) {
      var item;
      item = create.call(this, request, data);
      linking.linkItem(item, lookup);
      return item;
    };
  });
  wrapMethod(Item.prototype, 'deserialize', function(deserialize) {
    return function(data) {
      var item, ref1;
      if (data != null ? data.collection : void 0) {
        data = (ref1 = data.collection.items) != null ? ref1[0] : void 0;
      }
      item = lookup[data.href] || this;
      return deserialize.call(item, data);
    };
  });
  wrapMethod(Item.prototype, 'serialize', function(serialize) {
    return function(template) {
      var body, state;
      body = serialize.call(this, template);
      if ((state = this._state)) {
        body.template.data = body.template.data.filter(function(field) {
          var isSame, oldValue, value;
          oldValue = state[camelize(field.name)];
          value = field.value;
          if (field.name === 'type') {
            value = camelize(value);
          }
          isSame = value === oldValue || (value && oldValue && value.valueOf() === oldValue.valueOf());
          return !isSame;
        });
      }
      return body;
    };
  });
  Item.prototype.saveState = function() {
    this._state = {
      _undos: []
    };
    if (this.href) {
      copy(this, this._state);
    }
    return this;
  };
  Item.prototype.rollback = function() {
    this._state._undos.reverse().forEach(function(undo) {
      return undo();
    });
    this._state._undos.length = 0;
    return copy(this._state, this);
  };
  return Item.prototype.link = function(rel, item) {
    var related, undos;
    if (!this._state) {
      this.saveState();
    }
    undos = this._state._undos;
    if (this[rel]) {
      related = this[rel];
      linking.unlinkItemFrom(this, this[rel]);
      undos.push((function(_this) {
        return function() {
          _this[rel] = related;
          _this.links[rel].href = related.href;
          _this[rel + 'Id'] = related.id;
          return linking.linkItemWith(_this, related);
        };
      })(this));
    }
    this[rel] = item;
    if (item) {
      this[rel + 'Id'] = item.id;
      this.links[rel].href = item.href;
      linking.linkItemWith(this, item);
      undos.push((function(_this) {
        return function() {
          delete _this[rel];
          delete _this[rel + 'Id'];
          return linking.unlinkItemFrom(_this, item);
        };
      })(this));
    }
    return this;
  };
};

revertModel = function() {
  revertWrapMethod(MetaList.prototype, '_request');
  revertWrapMethod(ScopedCollection.prototype, 'save');
  revertWrapMethod(Item.prototype, 'delete');
  revertWrapMethod(Item, 'create');
  revertWrapMethod(Item.prototype, 'deserialize');
  revertWrapMethod(Item.prototype, 'serialize');
  delete Item.prototype.saveState;
  delete Item.prototype.rollback;
  return delete Item.prototype.link;
};

modifySDK = function(sdk) {
  wrapSave(sdk, 'saveMember', function(member) {
    return promises.when(sdk.loadAvailabilities({
      memberId: member.id
    }), sdk.loadTrackedItemStatuses({
      memberId: member.id
    }), sdk.loadCustomData({
      memberId: member.id
    }), sdk.loadLeagueCustomData({
      memberId: member.id
    }), sdk.loadMemberPayments({
      memberId: member.id
    }), sdk.loadMemberBalances({
      memberId: member.id
    }), sdk.loadTeamFees({
      teamId: member.teamId
    }), sdk.loadContacts({
      memberId: member.id
    }), sdk.loadContactEmailAddresses({
      memberId: member.id
    }), sdk.loadContactPhoneNumbers({
      memberId: member.id
    }));
  });
  wrapMethod(sdk, 'deleteMember', function(deleteMember) {
    return function(member, callback) {
      var toRemove;
      toRemove = [];
      toRemove.push.apply(toRemove, member.assignments);
      toRemove.push.apply(toRemove, member.availabilities);
      member.contacts.forEach(function(contact) {
        toRemove.push.apply(toRemove, contact.contactEmailAddresses);
        toRemove.push.apply(toRemove, contact.contactPhoneNumbers);
        return toRemove.push(contact);
      });
      toRemove.push.apply(toRemove, member.trackedItemStatuses);
      toRemove.push.apply(toRemove, member.memberPayments);
      toRemove.push.apply(toRemove, member.memberStatistics);
      toRemove.push.apply(toRemove, member.statisticData);
      toRemove.push.apply(toRemove, member.memberAssignments);
      linking.unlinkItems(toRemove, lookup);
      return deleteMember.call(this, member, callback).then(function(result) {
        sdk.loadTeamFees(member.teamId);
        sdk.loadStatisticAggregates(member.teamId);
        return result;
      }).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteContact', function(deleteContact) {
    return function(contact, callback) {
      var toRemove;
      toRemove = [];
      toRemove.push.apply(toRemove, contact.contactEmailAddresses);
      toRemove.push.apply(toRemove, contact.contactPhoneNumbers);
      linking.unlinkItems(toRemove, lookup);
      return deleteContact.call(this, contact, callback).then(function(result) {
        return sdk.loadMembers({
          memberId: contact.memberId
        }).then(function() {
          return result;
        });
      }).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveMemberEmailAddress', function(saveMemberEmailAddress) {
    return function(emailAddress, callback) {
      return saveMemberEmailAddress.call(this, emailAddress, callback).then(function(result) {
        return sdk.loadMembers({
          id: emailAddress.memberId
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteMemberEmailAddress', function(deleteMemberEmailAddress) {
    return function(emailAddress, callback) {
      return deleteMemberEmailAddress.call(this, emailAddress, callback).then(function(result) {
        return sdk.loadMembers({
          id: emailAddress.memberId
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveMemberPhoneNumber', function(saveMemberPhoneNumber) {
    return function(phoneNumber, callback) {
      return saveMemberPhoneNumber.call(this, phoneNumber, callback).then(function(result) {
        return promises.when(sdk.loadMembers({
          id: phoneNumber.memberId
        }), sdk.loadContactPhoneNumbers({
          memberId: phoneNumber.memberId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteMemberPhoneNumber', function(deleteMemberPhoneNumber) {
    return function(phoneNumber, callback) {
      return deleteMemberPhoneNumber.call(this, phoneNumber, callback).then(function(result) {
        return sdk.loadMembers({
          id: phoneNumber.memberId
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveContactEmailAddress', function(saveContactEmailAddress) {
    return function(emailAddress, callback) {
      return saveContactEmailAddress.call(this, emailAddress, callback).then(function(result) {
        return promises.when(sdk.loadMembers({
          id: emailAddress.memberId
        }), sdk.loadContacts({
          memberId: emailAddress.memberId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteContactEmailAddress', function(deleteContactEmailAddress) {
    return function(emailAddress, callback) {
      return deleteContactEmailAddress.call(this, emailAddress, callback).then(function(result) {
        return promises.when(sdk.loadMembers({
          id: emailAddress.memberId
        }), sdk.loadContacts({
          memberId: emailAddress.memberId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveContactPhoneNumber', function(saveContactPhoneNumber) {
    return function(phoneNumber, callback) {
      return saveContactPhoneNumber.call(this, phoneNumber, callback).then(function(result) {
        return promises.when(sdk.loadMembers({
          id: phoneNumber.memberId
        }), sdk.loadContacts({
          memberId: phoneNumber.memberId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteContactPhoneNumber', function(deleteContactPhoneNumber) {
    return function(phoneNumber, callback) {
      return deleteContactPhoneNumber.call(this, phoneNumber, callback).then(function(result) {
        return promises.when(sdk.loadMembers({
          id: phoneNumber.memberId
        }), sdk.loadContacts({
          memberId: phoneNumber.memberId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapSave(sdk, 'saveEvent', function(event) {
    var ids;
    ids = Array.isArray(event) ? (event.map(function(event) {
      return event.id;
    })).join(',') : event.id;
    return sdk.loadAvailabilities({
      eventId: ids
    });
  }, function(event) {
    var e, firstEvent, ref1, ref2, repeatingEventIds, toRemove;
    if (event.isGame) {
      return promises.when(sdk.loadTeamResults(event.teamId), sdk.loadOpponentResults(event.opponentId), sdk.loadEventStatistics({
        eventId: event.id
      }));
    } else if (Array.isArray(event)) {
      repeatingEventIds = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = event.length; i < len; i++) {
          e = event[i];
          results.push(e.id);
        }
        return results;
      })();
      firstEvent = event.shift();
      toRemove = [];
      if ((ref1 = firstEvent.team) != null) {
        if ((ref2 = ref1.events) != null) {
          ref2.forEach(function(e) {
            if (e.repeatingUuid === firstEvent.repeatingUuid) {
              return toRemove.push(e);
            }
          });
        }
      }
      toRemove = toRemove.filter(function(e) {
        var ref3;
        return ref3 = e.id, indexOf.call(repeatingEventIds, ref3) < 0;
      });
      return linking.unlinkItems(toRemove, lookup);
    }
  });
  wrapMethod(sdk, 'deleteEvent', function(deleteEvent) {
    return function(event, include, notify, notifyAs, callback) {
      var events, ref1, ref2, startDate, toRemove, uuid;
      events = [];
      if (typeof include === 'string' && include !== sdk.EVENTS.NONE) {
        uuid = event.repeatingUuid;
        startDate = event.startDate;
        if ((ref1 = event.team) != null) {
          if ((ref2 = ref1.events) != null) {
            ref2.forEach(function(event) {
              if (event.repeatingUuid === uuid) {
                return events.push(event);
              }
            });
          }
        }
        if (include === sdk.EVENTS.FUTURE) {
          events = events.filter(function(event) {
            return event.startDate >= startDate;
          });
        }
      } else {
        events.push(event);
      }
      toRemove = events.slice();
      events.forEach(function(event) {
        toRemove.push.apply(toRemove, event.assignments);
        toRemove.push.apply(toRemove, event.availabilities);
        return toRemove.push.apply(toRemove, event.eventStatistics);
      });
      event.assignments.forEach(function(assignment) {
        if (assignment.memberAssignments.length) {
          return assignment.memberAssignments.forEach(function(memberAssignment) {
            return toRemove.push.apply(toRemove, memberAssignment);
          });
        }
      });
      linking.unlinkItems(toRemove, lookup);
      return deleteEvent.call(this, event, include, notify, notifyAs, callback).then(function(result) {
        if (event.isGame) {
          return promises.when(sdk.loadTeamResults(event.teamId), sdk.loadOpponentResults(event.opponentId)).then(function() {
            return result;
          });
        } else {
          return result;
        }
      }, function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapSave(sdk, 'saveTrackedItem', function(trackedItem) {
    return sdk.loadTrackedItemStatuses({
      trackedItemId: trackedItem.id
    });
  });
  wrapMethod(sdk, 'deleteTrackedItem', function(deleteTrackedItem) {
    return function(trackedItem, callback) {
      var toRemove;
      toRemove = trackedItem.trackedItemStatuses.slice();
      linking.unlinkItems(toRemove, lookup);
      return deleteTrackedItem.call(this, trackedItem).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteStatistic', function(deleteStatistic) {
    return function(statistic, callback) {
      var toRemove;
      toRemove = statistic.statisticData.slice();
      toRemove.push.apply(toRemove, statistic.eventStatistics);
      toRemove.push.apply(toRemove, statistic.memberStatistics);
      toRemove.push.apply(toRemove, statistic.teamStatistics);
      toRemove.push.apply(toRemove, statistic.statisticAggregates);
      linking.unlinkItems(toRemove, lookup);
      return deleteStatistic.call(this, statistic).then(function(result) {
        var bulkLoadTypes, statisticId, teamId;
        teamId = statistic.teamId;
        statisticId = result.id;
        bulkLoadTypes = ['memberStatistic', 'teamStatistic', 'statisticAggregate', 'eventStatistic'];
        return sdk.bulkLoad(teamId, bulkLoadTypes).then(function() {
          return result;
        });
      }).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveStatistic', function(saveStatistic) {
    return function(statistic, callback) {
      if ((statistic.statisticGroupId == null) && (statistic.statisticGroup != null)) {
        linking.unlinkItems(statistic.statisticGroup, statistic);
      }
      return saveStatistic.call(this, statistic, callback).then(function(result) {
        var bulkLoadTypes, statisticId, teamId;
        teamId = statistic.teamId;
        statisticId = result.id;
        bulkLoadTypes = ['memberStatistic', 'teamStatistic', 'statisticAggregate', 'statistic', 'statisticGroup', 'eventStatistic'];
        return sdk.bulkLoad(teamId, bulkLoadTypes).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'bulkSaveStatisticData', function(bulkSaveStatisticData) {
    return function(templates, callback) {
      return bulkSaveStatisticData.call(this, templates, callback).then(function(result) {
        var bulkLoadTypes, teamId;
        if ((result[0] != null) && (result[0].teamId != null)) {
          teamId = result[0].teamId;
          bulkLoadTypes = ['memberStatistic', 'statisticAggregate', 'eventStatistic'];
          return sdk.bulkLoad(teamId, bulkLoadTypes).then(function() {
            return result;
          });
        }
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveStatisticDatum', function(saveStatisticDatum) {
    return function(statisticDatum, callback) {
      return saveStatisticDatum.call(this, statisticDatum, callback).then(function(result) {
        var bulkLoadTypes, statisticId, teamId;
        teamId = result.teamId;
        statisticId = result.statisticId;
        bulkLoadTypes = ['memberStatistic', 'statisticAggregate', 'eventStatistic'];
        return sdk.bulkLoad(teamId, bulkLoadTypes).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'bulkDeleteStatisticData', function(bulkDeleteStatisticData) {
    return function(member, event, callback) {
      var ref1, toRemove;
      toRemove = [];
      toRemove.push(event.eventStatistics);
      if ((ref1 = member.statisticData) != null) {
        ref1.forEach(function(statisticDatum) {
          if (statisticDatum.event === event) {
            return toRemove.push(statisticDatum);
          }
        });
      }
      linking.unlinkItems(toRemove, lookup);
      return bulkDeleteStatisticData.call(this, member, event).then(function(result) {
        var bulkLoadTypes, teamId;
        teamId = member.teamId;
        bulkLoadTypes = ['memberStatistic', 'statisticAggregate', 'eventStatistic'];
        return sdk.bulkLoad(teamId, bulkLoadTypes).then(function() {
          return result;
        });
      }).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveMemberPayment', function(saveMemberPayment) {
    return function(memberPayment, callback) {
      return saveMemberPayment.call(this, memberPayment).then(function(result) {
        var memberId, teamFeeId;
        memberId = result.memberId;
        teamFeeId = result.teamFeeId;
        return promises.when(sdk.loadMemberBalances({
          memberId: memberId
        }), sdk.loadTeamFees({
          id: teamFeeId
        }), sdk.loadPaymentNotes({
          memberPaymentId: memberPayment.id
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveTeamFee', function(saveTeamFee) {
    return function(teamFee, callback) {
      return saveTeamFee.call(this, teamFee).then(function(result) {
        var teamId;
        teamId = result.teamId;
        return sdk.loadMemberBalances({
          teamId: teamId
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteTeamFee', function(deleteTeamFee) {
    return function(teamFee, callback) {
      return deleteTeamFee.call(this, teamFee).then(function(result) {
        var teamId;
        teamId = teamFee.teamId;
        return sdk.loadMemberBalances({
          teamId: teamId
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'assignMediaToGroup', function(assignMediaToGroup) {
    return function(teamMediumIds, teamMediaGroup, callback) {
      return assignMediaToGroup.call(this, teamMediumIds, teamMediaGroup).then(function(result) {
        var bulkLoadTypes, teamId;
        teamId = result[0].teamId;
        bulkLoadTypes = ['teamMediaGroup', 'teamMedium'];
        return sdk.bulkLoad(teamId, bulkLoadTypes).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'setMediumAsTeamPhoto', function(setMediumAsTeamPhoto) {
    return function(teamMedium, callback) {
      return setMediumAsTeamPhoto.call(this, teamMedium).then(function(result) {
        var teamId;
        teamId = result.teamId;
        return sdk.loadTeamPreferences(teamId).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'setMediumAsMemberPhoto', function(setMediumAsMemberPhoto) {
    return function(teamMedium, member, callback) {
      return setMediumAsMemberPhoto.call(this, teamMedium, member).then(function(result) {
        if (member.id != null) {
          return sdk.loadMembers({
            id: member.id
          }).then(function() {
            return result;
          });
        }
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'uploadTeamMedium', function(uploadTeamMedium) {
    return function(teamMedium, progressCallback, callback) {
      return uploadTeamMedium.call(this, teamMedium, progressCallback).then(function(result) {
        return promises.when(sdk.loadTeam(teamMedium.teamId), sdk.loadTeamMediaGroups({
          id: teamMedium.teamMediaGroupId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveTeamMedium', function(saveTeamMedium) {
    return function(teamMedium, callback) {
      var ref1, teamMediaGroupIds;
      teamMediaGroupIds = [teamMedium.teamMediaGroupId];
      if ((((ref1 = teamMedium._state) != null ? ref1.teamMediaGroupId : void 0) != null) !== teamMedium.teamMediaGroupId) {
        teamMediaGroupIds.push(teamMedium._state.teamMediaGroupId);
      }
      return saveTeamMedium.call(this, teamMedium).then(function(result) {
        var teamId;
        teamId = teamMedium.teamId;
        return sdk.loadTeamMediaGroups({
          id: teamMediaGroupIds
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveTeamVideoLink', function(saveTeamVideoLink) {
    return function(teamMedium, callback) {
      return saveTeamVideoLink.call(this, teamMedium).then(function(result) {
        return sdk.loadTeamMediaGroups({
          id: teamMedium.teamMediaGroupId
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteTeamMedium', function(deleteTeamMedium) {
    return function(teamMedium, callback) {
      var toRemove;
      toRemove = teamMedium.teamMediumComments.slice();
      linking.unlinkItems(toRemove, lookup);
      return deleteTeamMedium.call(this, teamMedium).then(function(result) {
        return promises.when(sdk.loadTeam(teamMedium.teamId), sdk.loadTeamMediaGroups({
          id: teamMedium.teamMediaGroupId
        })).then(function() {
          return result;
        });
      }, function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'bulkDeleteTeamMedia', function(bulkDeleteTeamMedia) {
    return function(teamMediumIds, teamId, callback) {
      if (typeof teamId === 'function') {
        callback = teamId;
      }
      return bulkDeleteTeamMedia.call(this, teamMediumIds, callback).then(function(result) {
        if (typeof teamId === 'string' || typeof teamId === 'number') {
          return promises.when(sdk.loadTeam(teamId), sdk.loadTeamMediaGroups({
            teamId: teamId
          })).then(function() {
            return result;
          });
        } else {
          return result;
        }
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'reorderTeamMedia', function(reorderTeamMedia) {
    return function(teamId, teamMediaIds, teamMediaGroupId, callback) {
      var params;
      params = {
        teamId: teamId
      };
      if (typeof teamMediaGroupId === 'function') {
        callback = teamMediaGroupId;
      }
      if (typeof teamMediaGroupId === 'string' || typeof teamMediaGroupId === 'number') {
        params = {
          id: teamMediaGroupId
        };
      }
      return reorderTeamMedia.call(this, teamId, teamMediaIds).then(function(result) {
        return sdk.loadTeamMediaGroups(params).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteTeam', function(deleteTeam) {
    return function(team, callback) {
      var toRemove;
      toRemove = [];
      team.links.each(function(rel) {
        var value;
        value = team[name];
        if (types.getType(rel) && rel !== 'sport' && rel !== 'plan') {
          if (Array.isArray(value)) {
            return toRemove.push.apply(toRemove, value);
          } else {
            return toRemove.push(value);
          }
        }
      });
      return deleteTeam.call(this, team).then(function(result) {
        linking.unlinkItems(toRemove, lookup);
        return result;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteForumTopic', function(deleteForumTopic) {
    return function(topic, callback) {
      var toRemove;
      toRemove = [];
      toRemove.push.apply(toRemove, topic.forumPosts);
      linking.unlinkItems(toRemove, lookup);
      return deleteForumTopic.call(this, topic, callback).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'invite', function(invite) {
    return function(options, callback) {
      return invite.call(this, options).then(function(result) {
        var contactId, memberId;
        if (options.hasOwnProperty('memberId')) {
          memberId = options.memberId;
          return promises.when(sdk.loadContactEmailAddresses({
            memberId: memberId
          }), sdk.loadContactPhoneNumbers({
            memberId: memberId
          }), sdk.loadMembersPreferences({
            memberId: memberId
          }), sdk.features.combinedContactCards !== true ? (sdk.loadMemberEmailAddresses({
            memberId: memberId
          }), sdk.loadMemberPhoneNumbers({
            memberId: memberId
          })) : void 0).then(function() {
            return result;
          });
        } else if (options.hasOwnProperty('contactId')) {
          contactId = options.contactId;
          return sdk.loadContactEmailAddresses({
            contactId: contactId
          }).then(function() {
            return result;
          });
        }
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'memberPaymentTransaction', function(memberPaymentTransaction) {
    return function(memberPaymentId, amount, note, callback) {
      return memberPaymentTransaction.call(this, memberPaymentId, amount, note).then(function(result) {
        var memberId, teamFeeId;
        memberId = result.memberId;
        teamFeeId = result.teamFeeId;
        return promises.when(sdk.loadMemberBalances({
          memberId: memberId
        }), sdk.loadTeamFees({
          id: teamFeeId
        }), sdk.loadPaymentNotes({
          memberPaymentId: memberPaymentId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'importMembersFromTeam', function(importMembersFromTeam) {
    return function(memberIds, teamId, sendInvites, callback) {
      return importMembersFromTeam.call(this, memberIds, teamId, sendInvites).then(function(result) {
        memberIds = result.map(function(member) {
          return member.id;
        });
        return promises.when(sdk.loadMembers({
          id: memberIds
        }), sdk.loadContacts({
          memberId: memberIds
        }), sdk.loadContactEmailAddresses({
          memberId: memberIds
        }), sdk.loadContactPhoneNumbers({
          memberId: memberIds
        }), !sdk.features.combinedContactCards ? (sdk.loadMemberEmailAddresses({
          memberId: memberIds
        }), sdk.loadMemberPhoneNumbers({
          memberId: memberIds
        })) : void 0).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveBroadcastAlert', function(saveBroadcastAlert) {
    return function(broadcastAlert, callback) {
      return saveBroadcastAlert.call(this, broadcastAlert).then(function(result) {
        var params;
        if ((result.member != null) || (result.divisionMember != null)) {
          params = {
            memberId: result.memberId
          };
        } else {
          params = {
            contactId: result.contactId
          };
        }
        sdk.loadMessageData(params);
        return sdk.loadMessages({
          messageSourceId: result.id
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveBroadcastEmail', function(saveBroadcastEmail) {
    return function(broadcastEmail, callback) {
      return saveBroadcastEmail.call(this, broadcastEmail).then(function(result) {
        var params;
        if ((result.member != null) || (result.divisionMember != null)) {
          params = {
            memberId: result.memberId
          };
        } else {
          params = {
            contactId: result.contactId
          };
        }
        sdk.loadMessageData(params);
        return sdk.loadMessages({
          messageSourceId: result.id
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveAssignment', function(saveAssignment) {
    return function(assignment, callback) {
      return saveAssignment.call(this, assignment, callback).then(function(result) {
        return sdk.loadMemberAssignments({
          assignmentId: result.id
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteAssignment', function(deleteAssignment) {
    return function(assignment, callback) {
      var toRemove;
      if (assignment.memberAssignments.length) {
        toRemove = assignment.memberAssignments;
        linking.unlinkItems(toRemove, lookup);
      }
      return deleteAssignment.call(this, assignment).then(function(result) {
        return sdk.loadEvents({
          eventId: assignment.eventId
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'saveMemberAssignment', function(saveMemberAssignment) {
    return function(memberAssignment, callback) {
      return saveMemberAssignment.call(this, memberAssignment).then(function(result) {
        return sdk.loadAssignments({
          id: result.assignmentId
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'deleteMemberAssignment', function(deleteMemberAssignment) {
    return function(memberAssignment, callback) {
      return deleteMemberAssignment.call(this, memberAssignment, callback).then(function(result) {
        return sdk.loadAssignments({
          id: memberAssignment.assignmentId
        }).then(function(assignment) {
          assignment[0].member = null;
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'markMessageAsRead', function(markMessageAsRead) {
    return function(messageId, callback) {
      return markMessageAsRead.call(this, messageId, callback).then(function(result) {
        var params;
        if ((result.member != null) || (result.divisionMember != null)) {
          params = {
            memberId: result.memberId
          };
        } else {
          params = {
            contactId: result.contactId
          };
        }
        params.messageType = 'alert,email';
        sdk.loadMessages({
          id: result.messageId
        });
        return sdk.loadMessageData(params);
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'bulkDeleteMessages', function(bulkDeleteMessages) {
    return function(messages, callback) {
      var contactId, memberId, teamId, toRemove;
      if (Array.isArray(messages) && messages.length && this.isItem(messages[0], 'message')) {
        toRemove = messages;
      } else if (typeof messages === 'object' && this.isItem(messages, 'message')) {
        toRemove = [messages];
      }
      if (toRemove != null) {
        if (toRemove[0].contactId != null) {
          contactId = toRemove[0].contactId;
        } else if (toRemove[0].memberId != null) {
          memberId = toRemove[0].memberId;
        }
        teamId = toRemove[0].teamId;
        linking.unlinkItems(toRemove, lookup);
      }
      return bulkDeleteMessages.call(this, messages).then(function(result) {
        var params;
        if (toRemove != null) {
          params = {};
          if (contactId != null) {
            params.contactId = contactId;
          } else if (memberId != null) {
            params.memberId = memberId;
          }
          params.messageType = 'alert,email';
          params.teamId = teamId;
          return sdk.loadMessageData(params).then(function(result) {
            return result;
          }).fail(function(err) {
            return err;
          });
        } else {
          return result;
        }
      }).fail(function(err) {
        if (toRemove != null) {
          linking.linkItems(toRemove, lookup);
        }
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'createBulkAssignments', function(createBulkAssignments) {
    return function(eventSet, description, teamId, createAsMemberId, callback) {
      return createBulkAssignments.call(this, eventSet, description, teamId, createAsMemberId, callback).then(function(result) {
        var assignmentIds;
        assignmentIds = result.map(function(assignment) {
          return assignment.id;
        });
        return sdk.loadAssignments({
          id: assignmentIds
        }).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'bulkDeleteMembers', function(bulkDeleteMembers) {
    return function(members, callback) {
      var toRemove;
      toRemove = [];
      members.forEach(function(member) {
        toRemove.push.apply(toRemove, member.assignments);
        toRemove.push.apply(toRemove, member.availabilities);
        member.contacts.forEach(function(contact) {
          toRemove.push.apply(toRemove, contact.contactEmailAddresses);
          toRemove.push.apply(toRemove, contact.contactPhoneNumbers);
          return toRemove.push(contact);
        });
        toRemove.push.apply(toRemove, member.trackedItemStatuses);
        toRemove.push.apply(toRemove, member.memberPayments);
        toRemove.push.apply(toRemove, member.memberStatistics);
        toRemove.push.apply(toRemove, member.statisticData);
        return toRemove.push.apply(toRemove, member.memberAssignments);
      });
      linking.unlinkItems(toRemove, lookup);
      return bulkDeleteMembers.call(this, members, callback).then(function(result) {
        return result;
      }).fail(function(err) {
        linking.linkItems(toRemove, lookup);
        return err;
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'disableMember', function(disableMember) {
    return function(memberId, callback) {
      return disableMember.call(this, memberId, callback).then(function(result) {
        memberId = result.id;
        return promises.when(sdk.loadContactEmailAddresses({
          memberId: memberId
        }), sdk.loadContactPhoneNumbers({
          memberId: memberId
        }), sdk.loadMembersPreferences({
          memberId: memberId
        }), sdk.loadContacts({
          memberId: memberId
        }), !sdk.features.combinedContactCards ? (sdk.loadMemberEmailAddresses({
          memberId: memberId
        }), sdk.loadMemberPhoneNumbers({
          memberId: memberId
        })) : void 0).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  wrapMethod(sdk, 'inviteContactEmailAddresses', function(inviteContactEmailAddresses) {
    return function(params, callback) {
      return inviteContactEmailAddresses.call(this, params, callback).then(function(result) {
        var memberId;
        memberId = params.memberId;
        return promises.when(sdk.loadMembers({
          id: memberId
        }), sdk.loadContacts({
          memberId: memberId
        }), sdk.loadContactEmailAddresses({
          memberId: memberId
        }), sdk.loadContactPhoneNumbers({
          memberId: memberId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
  return wrapMethod(sdk, 'saveContact', function(saveContact) {
    return function(contact, callback) {
      return saveContact.call(this, contact, callback).then(function(result) {
        var contactId;
        contactId = contact.id;
        return promises.when(sdk.loadMembers({
          id: contact.memberId
        }), sdk.loadContacts({
          memberId: contact.memberId
        }), sdk.loadContactEmailAddresses({
          contactId: contactId
        }), sdk.loadContactPhoneNumbers({
          contactId: contactId
        })).then(function() {
          return result;
        });
      }).callback(callback);
    };
  });
};

revertSDK = function(sdk) {
  revertWrapMethod(sdk, 'saveMember');
  revertWrapMethod(sdk, 'deleteMember');
  revertWrapMethod(sdk, 'deleteContact');
  revertWrapMethod(sdk, 'saveEvent');
  revertWrapMethod(sdk, 'deleteEvent');
  revertWrapMethod(sdk, 'saveTrackedItem');
  revertWrapMethod(sdk, 'deleteTrackedItem');
  return revertWrapMethod(sdk, 'deleteTeam');
};

wrapMethod = function(obj, methodName, newMethodProvider) {
  var oldMethod;
  oldMethod = obj[methodName];
  obj[methodName] = newMethodProvider(oldMethod);
  obj[methodName].oldMethod = oldMethod;
  return obj;
};

revertWrapMethod = function(obj, methodName) {
  var oldMethod;
  oldMethod = obj[methodName].oldMethod;
  return obj[methodName] = oldMethod;
};

wrapSave = function(sdk, saveMethodName, onSaveNew, onSaveEdit) {
  return wrapMethod(sdk, saveMethodName, function(save) {
    return function(item, callback) {
      var savedItem;
      if (item.id && onSaveEdit) {
        savedItem = null;
        return save.call(this, item).then(function(item) {
          return savedItem = item;
        }).then(onSaveEdit).then(function() {
          return savedItem;
        }).callback(callback);
      } else if (!item.id && onSaveNew) {
        savedItem = null;
        return save.call(this, item).then(function(item) {
          return savedItem = item;
        }).then(onSaveNew).then(function() {
          return savedItem;
        }).callback(callback);
      } else {
        return save.call(this, item, callback);
      }
    };
  });
};

copy = function(from, to) {
  Object.keys(from).forEach(function(key) {
    if (typeof value === 'function' || key.charAt(0) === '_') {
      return;
    }
    return to[key] = from[key];
  });
  return to;
};

camelize = function(str) {
  return str.replace(/[-_]+(\w)/g, function(_, char) {
    return char.toUpperCase();
  });
};
