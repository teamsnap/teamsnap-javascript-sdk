// Generated by CoffeeScript 1.11.1
var buildEventDataFromCollection, camelize, emit, eventFactory, getIdForItemData, hasCustomEventConstructor, requestBuilder, requestError, requestResponse, requestStart, types;

types = require('./types');

camelize = function(str) {
  return str.replace(/[-_]+(\w)/g, function(_, char) {
    return char.toUpperCase();
  });
};

hasCustomEventConstructor = (function() {
  try {
    new CustomEvent('test-support');
    return true;
  } catch (error1) {
    return false;
  }
})();

eventFactory = function(eventName, data) {
  var sdkEvent;
  if (hasCustomEventConstructor) {
    sdkEvent = new CustomEvent(eventName, {
      detail: data
    });
  } else {
    sdkEvent = document.createEvent('CustomEvent');
    sdkEvent.initCustomEvent(eventName, true, false, data);
  }
  return document.dispatchEvent(sdkEvent);
};

getIdForItemData = function(itemData) {
  var id;
  id = null;
  itemData.some(function(field) {
    var parsedId;
    if (field.name === 'id') {
      parsedId = parseInt(field.value);
      if (parsedId) {
        id = parsedId;
      }
      return true;
    } else {
      return false;
    }
  });
  return id;
};

buildEventDataFromCollection = function(collection, method, refIds) {
  var eventData, ref;
  eventData = null;
  if ((ref = collection.items) != null ? ref.length : void 0) {
    refIds = collection.items.map(function(item) {
      return getIdForItemData(item.data);
    });
    refIds = refIds.filter(function(id) {
      return id != null;
    });
    if (refIds != null) {
      if (!Array.isArray(refIds)) {
        refIds = [refIds];
      }
      if (refIds.length) {
        eventData = {
          method: method,
          collection: camelize(collection.rel),
          refIds: refIds
        };
      }
    }
  }
  return eventData;
};

emit = function(data, eventType) {
  var eventName;
  if (eventType == null) {
    eventType = 'event';
  }
  eventName = 'teamsnap-sdk-' + eventType;
  return eventFactory(eventName, data);
};

requestBuilder = function(requestId, method, url, data, error) {
  var collection, collectionName, eventData, eventName, id, lastUrlPart, type, urlParts;
  eventName = 'request-start';
  if (error != null) {
    eventName = 'request-error';
  }
  urlParts = url.split('/');
  lastUrlPart = urlParts[urlParts.length - 1];
  if (method.toUpperCase() === 'DELETE') {
    id = parseInt(urlParts[urlParts.length - 1]);
    collection = urlParts[urlParts.length - 2];
    eventData = {
      requestId: requestId,
      method: method,
      collection: collection,
      data: {
        id: id
      }
    };
    if (error != null) {
      eventData.error = error;
    }
    return emit(eventData, eventName);
  } else if (lastUrlPart === 'search') {
    collectionName = camelize(urlParts[urlParts.length - 2]);
    type = types.getSingularType(collectionName);
    if (type) {
      eventData = {
        requestId: requestId,
        method: method,
        collection: collectionName,
        data: data
      };
      if (error != null) {
        eventData.error = error;
      }
      return emit(eventData, eventName);
    }
  } else {
    collectionName = camelize(lastUrlPart);
    type = types.getSingularType(collectionName);
    if (type) {
      eventData = {
        requestId: requestId,
        method: method,
        collection: collectionName,
        data: data
      };
      if (error != null) {
        eventData.error = error;
      }
    }
    return emit(eventData, eventName);
  }
};

requestStart = function(requestId, method, url, data) {
  return requestBuilder(requestId, method, url, data);
};

requestError = function(requestId, method, url, data, error) {
  return requestBuilder(requestId, method, url, data, error);
};

requestResponse = function(requestId, method, xhr) {
  var collection, collectionItems, collectionName, collections, data, eventData, ref, refIds, type, urlParts;
  data = xhr.data;
  eventData = null;
  if (method.toUpperCase() === 'DELETE') {
    urlParts = xhr.responseURL.split('/');
    refIds = [parseInt(urlParts[urlParts.length - 1])];
    collection = camelize(urlParts[urlParts.length - 2]);
    type = types.getSingularType(collection);
    if (type) {
      eventData = {
        requestId: requestId,
        method: method,
        collection: collection,
        refIds: refIds
      };
      return emit(eventData, 'request-response');
    }
  } else if (Array.isArray(data)) {
    return data.forEach(function(response) {
      var collectionName;
      collectionName = camelize(response.collection.rel);
      type = types.getSingularType(collectionName);
      if (type) {
        eventData = buildEventDataFromCollection(response.collection, method, refIds);
        if (eventData) {
          eventData.requestId = requestId;
          return emit(eventData, 'request-response');
        }
      }
    });
  } else if (data.collection.rel === 'bulk_load') {
    collections = {};
    collectionItems = (ref = data.collection) != null ? ref.items : void 0;
    if (collectionItems != null ? collectionItems.length : void 0) {
      collectionItems.forEach(function(item) {
        var itemCollection, itemType;
        itemType = null;
        item.data.some(function(field) {
          if (field.name === 'type') {
            itemType = camelize(field.value);
            return true;
          } else {
            return false;
          }
        });
        itemCollection = types.getPluralType(itemType);
        if (!collections.hasOwnProperty(itemCollection)) {
          collections[itemCollection] = {
            items: [],
            rel: itemCollection
          };
        }
        return collections[itemCollection].items.push(item);
      });
      return Object.keys(collections).forEach(function(collectionName) {
        collection = collections[collectionName];
        type = types.getSingularType(collectionName);
        if (type) {
          eventData = buildEventDataFromCollection(collection, method, refIds);
          if (eventData) {
            eventData.requestId = requestId;
            return emit(eventData, 'request-response');
          }
        }
      });
    }
  } else {
    eventData = buildEventDataFromCollection(data.collection, method, refIds);
    collectionName = camelize(data.collection.rel);
    type = types.getSingularType(collectionName);
    if (type && eventData) {
      eventData.requestId = requestId;
      return emit(eventData, 'request-response');
    }
  }
};

module.exports = {
  emit: emit,
  requestStart: requestStart,
  requestError: requestError,
  requestResponse: requestResponse
};
