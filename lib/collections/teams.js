// Generated by CoffeeScript 1.11.1
var cleanArray;

exports.loadTeams = function(params, callback) {
  if (params == null) {
    params = {};
  }
  if (typeof params === 'function') {
    callback = params;
    params = {};
  }
  if (Object.keys(params).length) {
    return this.loadItems('team', params, callback);
  } else {
    return this.loadMe().then((function(_this) {
      return function(me) {
        params.userId = me.id;
        return _this.loadItems('team', params, callback);
      };
    })(this));
  }
};

exports.loadTeam = function(teamId, callback) {
  if (!this.isId(teamId)) {
    throw new TSArgsError('teamsnap.loadTeam', 'teamId must be provided');
  }
  return this.loadItem('team', {
    teamId: teamId
  }, callback);
};

exports.createTeam = function(data) {
  return this.createItem(data, {
    type: 'team',
    name: ''
  });
};

exports.saveTeam = function(team, callback) {
  var ref;
  if (!team) {
    throw new TSArgsError('teamsnap.saveTeam', "`team` must be provided");
  }
  if (!this.isItem(team, 'team')) {
    throw new TSArgsError('teamsnap.saveTeam', "`type` must be 'team'");
  }
  if (!((ref = team.name) != null ? ref.trim() : void 0)) {
    return this.reject('You must provide a name for the team.', 'name', callback);
  }
  return this.saveItem(team, callback);
};

exports.deleteTeam = function(team, callback) {
  if (!team) {
    throw new TSArgsError('teamsnap.deleteTeam', '`team` must be provided');
  }
  return this.deleteItem(team, callback);
};

exports.bulkLoad = function(teamId, types, callback) {
  var key, loadParams, params, value;
  if (typeof teamId === 'object' && !Array.isArray(teamId)) {
    loadParams = teamId;
    teamId = loadParams.teamId;
    types = loadParams.types;
  }
  if (!(this.isId(teamId) || (Array.isArray(teamId) && this.isId(teamId[0])))) {
    throw new TSArgsError('teamsnap.bulkLoad', 'teamId must be provided');
    if (typeof types === 'function') {
      callback = types;
      types = null;
    }
  }
  if (!Array.isArray(types)) {
    types = this.getTeamTypes();
    types.splice(types.indexOf('availability'), 1);
  }
  params = {
    teamId: teamId,
    types: types.map(this.underscoreType).join(',')
  };
  if (loadParams != null) {
    if (loadParams.scopeTo != null) {
      params.scopeTo = this.underscoreType(loadParams.scopeTo);
    }
    for (key in loadParams) {
      value = loadParams[key];
      if (key.indexOf('__') !== -1) {
        params[key] = value;
      }
    }
  }
  return this.collections.root.queryItems('bulkLoad', params, callback);
};

exports.invite = function(options) {
  if (options == null) {
    options = {};
  }
  cleanArray(options, 'memberId');
  cleanArray(options, 'contactId');
  if (!(options.memberId || options.contactId)) {
    throw new TSArgsError('teamsnap.invite', 'options.memberId or options.contactId is required.');
  }
  if (!options.teamId) {
    throw new TSArgsError('teamsnap.invite', 'options.teamId is required.');
  }
  if (!options.notifyAsMemberId) {
    throw new TSArgsError('teamsnap.invite', 'options.notifyAsMemberId is required.');
  }
  return this.collections.teams.exec('invite', options);
};

exports.updateTimeZone = function(options) {
  if (options == null) {
    options = {};
  }
  if (!options.timeZone) {
    throw new TSArgsError('teamsnap.updateTimeZone', 'options.timeZone is required.');
  }
  if (!options.teamId) {
    throw new TSArgsError('teamsnap.updateTimeZone', 'options.teamId is required.');
  }
  if (!options.offsetTeamTimes) {
    throw new TSArgsError('teamsnap.updateTimeZone', 'options.offsetTeamTimes is required');
  }
  return this.collections.teams.exec('updateTimeZone', options);
};

exports.resetStatistics = function(teamId, callback) {
  var params;
  if (!teamId) {
    throw new TSArgsError('teamsnap.resetStatistics', "`teamId` must be provided");
  }
  if (this.isItem(teamId, 'teamId')) {
    teamId = teamId.id;
  }
  if (!this.isId(teamId)) {
    throw new TSArgsError('teamsnap.resetStatistics', "`teamId` must be a valid id");
  }
  params = {
    teamId: teamId
  };
  return this.collections.teams.exec('resetStatistics', params).callback(callback);
};

exports.divisionLoadTeams = function(params, callback) {
  if (!params.divisionId) {
    throw new TSArgsError('teamsnap.divisionLoadTeams', "`divisionId` must be provided");
  }
  return this.collections.teams.queryItems('divisionSearch', params, callback);
};

cleanArray = function(obj, prop) {
  var plural;
  plural = prop + 's';
  if (obj[plural]) {
    obj[prop] = obj[plural];
    delete obj[plural];
  }
  if ((obj[prop] != null) && !Array.isArray(obj[prop])) {
    obj[prop] = [obj[prop]];
  }
  return obj;
};
