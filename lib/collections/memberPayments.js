// Generated by CoffeeScript 1.11.1
exports.loadMemberPayments = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadMemberPayments', 'must provide a teamId or query parameters');
  }
  return this.loadItems('memberPayment', params, callback);
};

exports.saveMemberPayment = function(memberPayment, callback) {
  if (!memberPayment) {
    throw new TSArgsError('teamsnap.saveMemberPayment', '`memberPayment` must be provided');
  }
  if (!this.isItem(memberPayment, 'memberPayment')) {
    throw new TSArgsError('teamsnap.saveMemberPayment', "`memberPayment.type` must be 'memberPayment'");
  }
  if (!memberPayment.memberId) {
    return this.reject('You must choose a member.', 'memberId', callback);
  }
  return this.saveItem(memberPayment, callback);
};

exports.memberPaymentTransaction = function(memberPaymentId, amount, note, callback) {
  var params;
  if (!this.isItem(memberPaymentId)) {
    throw new TSArgsError('teamsnap.memberPaymentTransaction', "must provide a `memberPaymentId`");
  }
  if (this.isItem(memberPaymentId)) {
    memberPaymentId = memberPaymentId.id;
  }
  if (!amount) {
    return this.reject('You must add an amount.', 'amount', callback);
  }
  if (typeof note === 'function') {
    callback = note;
  }
  params = {
    memberPaymentId: memberPaymentId,
    amount: amount,
    note: note
  };
  return this.collections.memberPayments.exec('transaction', params).pop().callback(callback);
};
