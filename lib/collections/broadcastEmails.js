// Generated by CoffeeScript 1.11.1
exports.loadBroadcastEmails = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadBroadcastEmails', 'must provide a teamId or query parameters');
  }
  return this.loadItems('broadcastEmail', params, callback);
};

exports.createBroadcastEmail = function(data) {
  return this.createItem(data, {
    type: 'broadcastEmail'
  });
};

exports.saveBroadcastEmail = function(broadcastEmail, callback) {
  var ref;
  if (!broadcastEmail) {
    throw new TSArgsError('teamsnap.saveBroadcastEmail', "`broadcastEmail` must be provided");
  }
  if (!this.isItem(broadcastEmail, 'broadcastEmail')) {
    throw new TSArgsError('teamsnap.saveBroadcastEmail', "`type` must be 'broadcastEmail'");
  }
  if (broadcastEmail.isLeague) {
    if (!broadcastEmail.divisionId) {
      return reject('You must provide a division id.', 'divisionId', callback);
    }
  } else {
    if (!broadcastEmail.teamId) {
      return this.reject('You must provide a team id.', 'teamId', callback);
    }
  }
  if (!broadcastEmail.memberId) {
    return this.reject('You must provide a member id.', 'memberId', callback);
  }
  if (!((ref = broadcastEmail.body) != null ? ref.trim() : void 0)) {
    return this.reject('You must provide the text alert body.', 'body', callback);
  }
  if (!broadcastEmail.isDraft) {
    if (!broadcastEmail.isLeague) {
      if (!(Array.isArray(broadcastEmail.recipientIds) && broadcastEmail.recipientIds.length > 0)) {
        return this.reject('You must provide at least one recipient.', 'recipientIds');
      }
    }
  }
  return this.saveItem(broadcastEmail, callback);
};

exports.deleteBroadcastEmail = function(broadcastEmail, callback) {
  if (!broadcastEmail) {
    throw new TSArgsError('teamsnap.deleteBroadcastEmail', '`broadcastEmail` must be provided');
  }
  return this.deleteItem(broadcastEmail, callback);
};

exports.bulkDeleteBroadcastEmails = function(broadcastEmailIds, callback) {
  if (!(Array.isArray(broadcastEmailIds))) {
    throw new TSArgsError('teamsnap.broadcastEmailIds', 'You must provide an array of broadcastEmail IDs');
  }
  return this.collections.broadcastEmails.exec('bulkDelete', {
    id: broadcastEmailIds
  }, callback);
};
