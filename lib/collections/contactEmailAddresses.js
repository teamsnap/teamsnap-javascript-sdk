// Generated by CoffeeScript 1.11.1
exports.loadContactEmailAddresses = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadContactEmailAddresses', 'must provide a teamId or query parameters');
  }
  return this.loadItems('contactEmailAddress', params, callback);
};

exports.createContactEmailAddress = function(data) {
  return this.createItem(data, {
    type: 'contactEmailAddress',
    receivesTeamEmails: true
  });
};

exports.saveContactEmailAddress = function(contactEmailAddress, callback) {
  if (!contactEmailAddress) {
    throw new TSArgsError('teamsnap.saveContactEmailAddress', '`contactEmailAddress` must be provided');
  }
  if (!this.isItem(contactEmailAddress, 'contactEmailAddress')) {
    throw new TSArgsError('teamsnap.saveContactEmailAddress', "`contactEmailAddress.type` must be 'contactEmailAddress'");
  }
  if (!contactEmailAddress.contactId) {
    return this.reject('You must choose a contact.', 'contactId', callback);
  }
  return this.saveItem(contactEmailAddress, callback);
};

exports.deleteContactEmailAddress = function(contactEmailAddress, callback) {
  if (!contactEmailAddress) {
    throw new TSArgsError('teamsnap.deleteContactEmailAddress', '`contactEmailAddress` must be provided');
  }
  return this.deleteItem(contactEmailAddress, callback);
};

exports.inviteContactEmailAddresses = function(params, callback) {
  if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.inviteContactEmailAddresses', 'must provide a params object');
  }
  if (!params.teamId) {
    throw new TSArgsError('teamsnap.inviteContactEmailAddresses', 'params.teamId is required.');
  }
  if (!params.memberId) {
    throw new TSArgsError('teamsnap.inviteContactEmailAddresses', 'params.memberId is required.');
  }
  if (!params.contactEmailAddressIds) {
    throw new TSArgsError('teamsnap.inviteContactEmailAddresses', 'params.contactEmailAddressIds is required.');
  }
  return this.collections.contactEmailAddresses.exec('invite', params, callback);
};
