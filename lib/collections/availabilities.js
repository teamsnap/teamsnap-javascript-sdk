// Generated by CoffeeScript 1.11.1
var key, ref, statuses, value;

exports.AVAILABILITIES = {
  NONE: null,
  NO: 0,
  YES: 1,
  MAYBE: 2
};

statuses = {};

ref = exports.AVAILABILITIES;
for (key in ref) {
  value = ref[key];
  statuses[value] = true;
}

exports.loadAvailabilities = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadAvailabilities', 'must provide a teamId or query parameters');
  }
  return this.loadItems('availability', params, callback);
};

exports.saveAvailability = function(availability, callback) {
  if (!availability) {
    throw new TSArgsError('teamsnap.saveAvailability', "`availability` must be provided");
  }
  if (!this.isItem(availability, 'availability')) {
    throw new TSArgsError('teamsnap.saveAvailability', "`type` must be 'availability'");
  }
  if (availability.statusCode !== null && !statuses[availability.statusCode]) {
    return this.reject('You must select a valid status or null', 'statusCode', callback);
  }
  return this.saveItem(availability, callback);
};

exports.bulkMarkUnsetAvailabilities = function(memberId, statusCode, callback) {
  var params;
  if (!this.isId(memberId)) {
    throw new TSArgsError('teamsnap.bulkMarkUnsetAvailabilities', "must provide a `memberId`");
  }
  if (!((statusCode != null) && statuses[statusCode])) {
    return this.reject('You must select a valid status', 'statusCode', callback);
  }
  params = {
    memberId: memberId,
    statusCode: statusCode
  };
  return this.collections.availabilities.exec('bulkMarkUnsetAvailabilities', params).pop().callback(callback);
};
