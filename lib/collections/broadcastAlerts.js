// Generated by CoffeeScript 1.11.1
exports.loadBroadcastAlerts = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadBroadcastAlerts', 'must provide a teamId or query parameters');
  }
  return this.loadItems('broadcastAlert', params, callback);
};

exports.createBroadcastAlert = function(data) {
  return this.createItem(data, {
    type: 'broadcastAlert'
  });
};

exports.saveBroadcastAlert = function(broadcastAlert, callback) {
  var ref;
  if (!broadcastAlert) {
    throw new TSArgsError('teamsnap.saveBroadcastAlert', "`broadcastAlert` must be provided");
  }
  if (!this.isItem(broadcastAlert, 'broadcastAlert')) {
    throw new TSArgsError('teamsnap.saveBroadcastAlert', "`type` must be 'broadcastAlert'");
  }
  if (broadcastAlert.isLeague) {
    if (!broadcastAlert.divisionId) {
      return reject('You must provide a division id.', 'divisionId', callback);
    }
  } else {
    if (!broadcastAlert.teamId) {
      return this.reject('You must provide a team id.', 'teamId', callback);
    }
  }
  if (!broadcastAlert.memberId) {
    return this.reject('You must provide a member id.', 'memberId', callback);
  }
  if (!((ref = broadcastAlert.body) != null ? ref.trim() : void 0)) {
    return this.reject('You must provide the text alert body.', 'body', callback);
  }
  return this.saveItem(broadcastAlert, callback);
};

exports.deleteBroadcastAlert = function(broadcastAlert, callback) {
  if (!broadcastAlert) {
    throw new TSArgsError('teamsnap.deleteBroadcastAlert', '`broadcastAlert` must be provided');
  }
  return this.deleteItem(broadcastAlert, callback);
};

exports.bulkDeleteBroadcastAlerts = function(broadcastAlertIds, callback) {
  if (!(Array.isArray(broadcastAlertIds))) {
    throw new TSArgsError('teamsnap.broadcastAlertIds', 'You must provide an array of broadcastAlert IDs');
  }
  return this.collections.broadcastAlerts.exec('bulkDelete', {
    id: broadcastAlertIds
  }, callback);
};
