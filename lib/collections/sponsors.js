// Generated by CoffeeScript 1.11.1
exports.loadSponsors = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadSponsors', 'must provide a teamId or query parameters');
  }
  return this.loadItems('sponsor', params, callback);
};

exports.createSponsor = function(data) {
  return this.createItem(data, {
    type: 'sponsor',
    name: ''
  });
};

exports.saveSponsor = function(sponsor, callback) {
  if (!sponsor) {
    throw new TSArgsError('teamsnap.saveSponsor', "`sponsor` must be provided");
  }
  if (!this.isItem(sponsor, 'sponsor')) {
    throw new TSArgsError('teamsnap.saveSponsor', "`sponsor.type` must be 'sponsor'");
  }
  return this.saveItem(sponsor, callback);
};

exports.deleteSponsor = function(sponsor, callback) {
  if (!sponsor) {
    throw new TSArgsError('teamsnap.deleteSponsor', "`sponsor` must be provided");
  }
  return this.deleteItem(sponsor, callback);
};

exports.uploadSponsorLogo = function(sponsorId, file, callback) {
  var params;
  if (this.isItem(sponsorId, 'sponsor')) {
    sponsorId = sponsorId.id;
  }
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!this.isId(sponsorId)) {
    throw new TSArgsError('teamsnap.uploadSponsorLogo', 'must include `sponsorId`');
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadSponsorLogo', 'must include `file` as type File');
  }
  params = {
    sponsorId: sponsorId,
    file: file
  };
  return this.collections.sponsors.exec('uploadSponsorLogo', params).pop().callback(callback);
};

exports.deleteSponsorLogo = function(sponsorId, callback) {
  var params;
  if (!sponsorId) {
    throw new TSArgsError('teamsnap.deleteSponsorLogo', "`sponsorId` must be provided");
  }
  if (this.isItem(sponsorId, 'sponsor')) {
    sponsorId = sponsorId.id;
  }
  if (!this.isId(sponsorId)) {
    throw new TSArgsError('teamsnap.deleteSponsorLogo', "`sponsorId` must be a valid id");
  }
  params = {
    sponsorId: sponsorId
  };
  return this.collections.sponsors.exec('removeSponsorLogo', params).callback(callback);
};
