// Generated by CoffeeScript 1.11.1
exports.ASSIGNMENTS_ENABLED_FOR_CODE = {
  GamesAndEvents: 0,
  Games: 1,
  Events: 2
};

exports.loadTeamsPreferences = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadTeamPreferences', 'must provide a teamId or query parameters');
  }
  return this.loadItems('teamPreferences', params, callback);
};

exports.loadTeamPreferences = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadTeamPreferences', 'must provide a teamId or query parameters');
  }
  return this.loadItem('teamPreferences', params, callback);
};

exports.saveTeamPreferences = function(teamPreferences, callback) {
  if (!teamPreferences) {
    throw new TSArgsError('teamsnap.saveTeamPreferences', "`teamPreferences` must be provided");
  }
  if (!this.isItem(teamPreferences, 'teamPreferences')) {
    throw new TSArgsError('teamsnap.saveTeamPreferences', "`teamPreferences.type` must be 'teamPreferences'");
  }
  return this.saveItem(teamPreferences, callback);
};

exports.uploadTeamPhoto = function(teamPreferencesId, file, callback) {
  var params;
  if (this.isItem(teamPreferencesId, 'teamPreferences')) {
    teamPreferencesId = teamPreferencesId.id;
  }
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!this.isId(teamPreferencesId)) {
    throw new TSArgsError('teamsnap.uploadTeamPhoto', 'must include `teamPreferencesId`');
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadTeamPhoto', 'must include `file` as type File');
  }
  params = {
    teamPreferencesId: teamPreferencesId,
    file: file
  };
  return this.collections.teamsPreferences.exec('uploadTeamPhoto', params).pop().callback(callback);
};

exports.deleteTeamPhoto = function(teamPreferencesId, callback) {
  var params;
  if (!teamPreferencesId) {
    throw new TSArgsError('teamsnap.deleteTeamPhoto', "`teamPreferencesId` must be provided");
  }
  if (this.isItem(teamPreferencesId, 'teamPreferences')) {
    teamPreferencesId = teamPreferences.id;
  }
  if (!this.isId(teamPreferencesId)) {
    throw new TSArgsError('teamsnap.deleteTeamPhoto', "`teamPreferencesId` must be a valid id");
  }
  params = {
    teamPreferencesId: teamPreferencesId
  };
  return this.collections.teamsPreferences.exec('removeTeamPhoto', params).callback(callback);
};

exports.uploadTeamLogo = function(teamPreferencesId, file, callback) {
  var params;
  if (this.isItem(teamPreferencesId, 'teamPreferences')) {
    teamPreferencesId = teamPreferences.id;
  }
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!this.isId(teamPreferencesId)) {
    throw new TSArgsError('teamsnap.uploadTeamLogo', 'must include `teamPreferencesId`');
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadTeamLogo', 'must include `file` as type File');
  }
  params = {
    teamPreferencesId: teamPreferencesId,
    file: file
  };
  return this.collections.teamsPreferences.exec('uploadTeamLogo', params).pop().callback(callback);
};

exports.deleteTeamLogo = function(teamPreferencesId, callback) {
  var params;
  if (!teamPreferencesId) {
    throw new TSArgsError('teamsnap.deleteTeamLogo', "`teamPreferencesId` must be provided");
  }
  if (this.isItem(teamPreferencesId, 'teamPreferences')) {
    teamPreferencesId = teamPreferences.id;
  }
  if (!this.isId(teamPreferencesId)) {
    throw new TSArgsError('teamsnap.deleteTeamLogo', "`teamPreferencesId` must be a valid id");
  }
  params = {
    teamPreferencesId: teamPreferencesId
  };
  return this.collections.teamsPreferences.exec('removeTeamLogo', params).callback(callback);
};
