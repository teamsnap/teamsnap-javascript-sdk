// Generated by CoffeeScript 1.11.1
var includes, key, ref, value;

exports.EVENTS = {
  NONE: 'none',
  FUTURE: 'future',
  ALL: 'all'
};

exports.REMINDERS = {
  ALL: 'all',
  UNSET: 'unset'
};

includes = {};

ref = exports.EVENTS;
for (key in ref) {
  value = ref[key];
  includes[value] = true;
}

exports.loadEvents = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadEvents', 'must provide a teamId or query parameters');
  }
  return this.loadItems('event', params, callback);
};

exports.createEvent = function(data) {
  return this.createItem(data, {
    type: 'event',
    isGame: false,
    tracksAvailability: true
  });
};

exports.saveEvent = function(event, callback) {
  var ref1, ref2;
  if (!event) {
    throw new TSArgsError('teamsnap.saveEvent', "`event` must be provided");
  }
  if (!this.isItem(event, 'event')) {
    throw new TSArgsError('teamsnap.saveEvent', "`event.type` must be 'event'");
  }
  if (!(event.isGame || ((ref1 = event.name) != null ? ref1.trim() : void 0))) {
    return this.reject('You must provide a name.', 'name', callback);
  }
  if (!event.teamId) {
    return this.reject('You must choose a team.', 'teamId', callback);
  }
  if (!(event.locationId || event.divisionLocationId)) {
    return this.reject('You must choose a location.', 'locationId', callback);
  }
  if (event.isGame && !event.opponentId) {
    return this.reject('You must choose an opponent.', 'opponentId', callback);
  }
  if (isNaN((ref2 = event.startDate) != null ? ref2.getTime() : void 0)) {
    return this.reject('You must provide a valid start date.', 'startDate', callback);
  }
  if (event.notifyTeam && !event.notifyTeamAsMemberId) {
    return this.reject('You must provide the current member\'s id.', 'notifyTeamAsMemberId', callback);
  }
  return this.saveItem(event, callback);
};

exports.deleteEvent = function(event, include, notify, notifyAs, callback) {
  var params;
  params = {};
  if (!event) {
    throw new TSArgsError('teamsnap.deleteEvent', '`event` must be provided');
  }
  if (typeof include === 'function') {
    callback = include;
    include = null;
  }
  if (!include && event.repeatingUuid) {
    include = this.EVENTS.NONE;
  }
  if (include) {
    if (!includes[include]) {
      throw new TSArgsError('teamsnap.deleteEvent', "`include` must be one of " + (Object.keys(includes).join(', ')));
    }
    params.repeatingInclude = include;
  }
  if (notify) {
    params.notifyTeam = notify;
    if (!notifyAs) {
      throw new TSArgsError('teamsnap.deleteEvent', '`notifyTeamAsMemberId` must be provided');
    }
    params.notifyTeamAsMemberId = notifyAs;
  }
  return this.deleteItem(event, params, callback);
};

exports.sendAvailabilityReminders = function(eventId, sendingMemberId, include) {
  var options;
  if (!include) {
    include = [];
  }
  if (this.isItem(eventId, 'event')) {
    eventId = eventId.id;
  }
  if (this.isItem(sendingMemberId, 'member')) {
    sendingMemberId = sendingMemberId.id;
  } else if (this.isItem(sendingMemberId, 'divisionMember')) {
    sendingMemberId = sendingMemberId.id;
  }
  if (!this.isId(eventId)) {
    throw new TSArgsError('teamsnap.sendAvailabilityReminders', 'must include id `eventId`');
  }
  if (!this.isId(sendingMemberId)) {
    throw new TSArgsError('teamsnap.sendAvailabilityReminders', 'must include id `sendingMemberId`');
  }
  if (!Array.isArray(include)) {
    throw new TSArgsError('teamsnap.sendAvailabilityReminders', "`include` must be an array of member ids");
  }
  if ((include == null) || include.length === 0) {
    throw new TSArgsError('teamsnap.sendAvailabilityReminders', "`include` must be an array of member ids");
  }
  options = {
    id: eventId,
    membersToNotify: include,
    notifyTeamAsMemberId: sendingMemberId
  };
  return this.collections.events.exec('sendAvailabilityReminders', options);
};

exports.getEventSort = function() {
  return (function(_this) {
    return function(itemA, itemB) {
      var valueA, valueB;
      if (!_this.isItem(itemA, 'event') || !_this.isItem(itemB, 'event')) {
        valueA = itemA.type;
        valueB = itemB.type;
      } else {
        valueA = itemA.startDate;
        valueB = itemB.startDate;
      }
      if (valueA > valueB) {
        return 1;
      } else if (valueA < valueB) {
        return -1;
      } else {
        return 0;
      }
    };
  })(this);
};

exports.bulkCreateEvents = function(params, callback) {
  var options;
  if (!params.teamId) {
    return this.reject('You must choose a team.', 'teamId', callback);
  }
  if (!Array.isArray(params.events)) {
    throw new TSArgsError('teamsnap.bulkCreateEvents', "`events` must be an array of events");
  }
  options = {
    templates: params.events,
    teamId: params.teamId,
    notifyTeamAsMemberId: params.sendingMemberId,
    notifyTeam: params.notifyTeam
  };
  return this.collections.events.exec('bulkCreate', options, callback);
};
