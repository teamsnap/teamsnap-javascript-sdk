// Generated by CoffeeScript 1.11.1
exports.loadBatchInvoiceLineItems = function(params, callback) {
  if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadBatchInvoiceLineItems', 'must provide query parameters');
  }
  return this.loadItems('batchInvoiceLineItem', params, callback);
};

exports.createBatchInvoiceLineItem = function(data) {
  return this.createItem(data, {
    type: 'batchInvoiceLineItem'
  });
};

exports.saveBatchInvoiceLineItem = function(batchInvoiceLineItem, callback) {
  if (!batchInvoiceLineItem) {
    throw new TSArgsError('teamsnap.saveBatchInvoiceLineItem', "`batchInvoiceLineItem` must be provided");
  }
  if (!this.isItem(batchInvoiceLineItem, 'batchInvoiceLineItem')) {
    throw new TSArgsError('teamsnap.saveBatchInvoiceLineItem', "`batchInvoiceLineItem.type` must be 'batchInvoiceLineItem'");
  }
  if (!batchInvoiceLineItem.batchInvoiceId) {
    return this.reject('You must choose a batchInvoiceId.', 'batchInvoiceId', callback);
  }
  if (!batchInvoiceLineItem.quantity) {
    return this.reject('You must provide a quantity.', 'quantity', callback);
  }
  if (!batchInvoiceLineItem.amount) {
    return this.reject('You must provide an amount.', 'amount', callback);
  }
  return this.saveItem(batchInvoiceLineItem, callback);
};

exports.deleteBatchInvoiceLineItem = function(batchInvoiceLineItem, callback) {
  if (!batchInvoiceLineItem) {
    throw new TSArgsError('teamsnap.deleteBatchInvoiceLineItem', '`batchInvoiceLineItem` must be provided');
  }
  return this.deleteItem(batchInvoiceLineItem, callback);
};
