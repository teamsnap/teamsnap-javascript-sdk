// Generated by CoffeeScript 1.11.1
exports.ROTATION_DIRECTIONS = {
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

exports.loadTeamMedia = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadTeamMedia', 'must provide a teamId or query parameters');
  }
  return this.loadItems('teamMedium', params, callback);
};

exports.createTeamMedium = function(data) {
  return this.createItem(data, {
    type: 'teamMedium'
  });
};

exports.uploadTeamMedium = function(teamMedium, progressCallback, callback) {
  if (!teamMedium) {
    throw new TSArgsError('teamsnap.uploadTeamMedium', "`teamMedium` must be provided");
  }
  if (!this.isItem(teamMedium, 'teamMedium')) {
    throw new TSArgsError('teamsnap.uploadTeamMedium', "`type` must be 'teamMedium'");
  }
  if (!this.isId(teamMedium.teamId)) {
    throw new TSArgsError('teamsnap.uploadTeamMedium', 'must include `teamId`');
  }
  if (!this.isId(teamMedium.teamMediaGroupId)) {
    throw new TSArgsError('teamsnap.uploadTeamMedium', 'must include `teamMediaGroupId`');
  }
  if (!(teamMedium.file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadTeamMedium', 'must include `file` as type File');
  }
  return this.collections.teamMedia.file('uploadTeamMedium', teamMedium, progressCallback).pop().callback(callback);
};

exports.deleteTeamMedium = function(teamMedium, callback) {
  if (!teamMedium) {
    throw new TSArgsError('teamsnap.deleteTeamMedium', '`teamMedium` must be provided');
  }
  return this.deleteItem(teamMedium, callback);
};

exports.saveTeamMedium = function(teamMedium, callback) {
  if (!teamMedium) {
    throw new TSArgsError('teamsnap.saveTeamMedium', "`teamMedium` must be provided");
  }
  if (!this.isItem(teamMedium, 'teamMedium')) {
    throw new TSArgsError('teamsnap.saveTeamMedium', "`type` must be 'teamMedium'");
  }
  if (!this.isId(teamMedium.teamId)) {
    throw new TSArgsError('teamsnap.saveTeamMedium', 'must include `teamId`');
  }
  if (!this.isId(teamMedium.memberId)) {
    throw new TSArgsError('teamsnap.saveTeamMedium', 'must include `memberId`');
  }
  if (!this.isId(teamMedium.teamMediaGroupId)) {
    throw new TSArgsError('teamsnap.saveTeamMedium', 'must include `teamMediaGroupId`');
  }
  return this.saveItem(teamMedium, callback);
};

exports.saveTeamVideoLink = function(teamMedium, callback) {
  if (!teamMedium) {
    throw new TSArgsError('teamsnap.createVideoLink', "`teamMedium` must be provided");
  }
  if (!this.isItem(teamMedium, 'teamMedium')) {
    throw new TSArgsError('teamsnap.createVideoLink', "`type` must be 'teamMedium'");
  }
  if (!this.isId(teamMedium.teamId)) {
    throw new TSArgsError('teamsnap.createVideoLink', 'must include `teamId`');
  }
  if (!this.isId(teamMedium.teamMediaGroupId)) {
    throw new TSArgsError('teamsnap.createVideoLink', 'must include `teamMediaGroupId`');
  }
  return this.collections.teamMedia.exec('createTeamVideoLink', teamMedium).pop().callback(callback);
};

exports.bulkDeleteTeamMedia = function(teamMediumIds, callback) {
  var params;
  if (!teamMediumIds) {
    throw new TSArgsError('teamsnap.bulkDeleteTeamMedia', "`teamMediumIds` must be provided");
  }
  params = {
    teamMediumIds: teamMediumIds
  };
  return this.collections.teamMedia.exec('bulkDeleteTeamMedia', params).callback(callback);
};

exports.assignMediaToGroup = function(teamMediumIds, teamMediaGroupId, callback) {
  var params;
  if (!teamMediumIds) {
    throw new TSArgsError('teamsnap.assignMediaToGroup', 'must provide teamMediumIds');
  }
  if (this.isItem(teamMediaGroupId, 'teamMediaGroup')) {
    teamMediaGroupId = teamMediaGroupId.id;
  }
  if (!(teamMediaGroupId && this.isId(teamMediaGroupId))) {
    throw new TSArgsError('teamsnap.assignMediaToGroup', 'must provide a teamMediaGroupId');
  }
  params = {
    teamMediumIds: teamMediumIds,
    teamMediaGroupId: teamMediaGroupId
  };
  return this.collections.teamMedia.exec('assignMediaToGroup', params).callback(callback);
};

exports.rotateTeamMediumImage = function(teamMediumId, rotateDirection, callback) {
  var params;
  if (this.isItem(teamMediumId, 'teamMedium')) {
    teamMediumId = teamMediumId.id;
  }
  if (!(teamMediumId && this.isId(teamMediumId))) {
    throw new TSArgsError('teamsnap.rotateTeamMediumImage', 'must provide a teamMediumId');
  }
  if (!rotateDirection) {
    throw new TSArgsError('teamsnap.rotateTeamMediumImage', 'must provide a rotateDirection');
  }
  params = {
    teamMediumId: teamMediumId,
    rotateDirection: rotateDirection
  };
  return this.collections.teamMedia.exec('rotateTeamMediumImage', params).pop().callback(callback);
};

exports.setMediumAsTeamPhoto = function(teamMediumId, callback) {
  var params;
  if (this.isItem(teamMediumId, 'teamMedium')) {
    teamMediumId = teamMediumId.id;
  }
  if (!(teamMediumId && this.isId(teamMediumId))) {
    throw new TSArgsError('teamsnap.setMediumAsTeamPhoto', 'must include a teamMediumId');
  }
  params = {
    teamMediumId: teamMediumId
  };
  return this.collections.teamMedia.exec('setMediumAsTeamPhoto', params).pop().callback(callback);
};

exports.setMediumAsMemberPhoto = function(teamMediumId, memberId, callback) {
  var params;
  if (this.isItem(teamMediumId, 'teamMedium')) {
    teamMediumId = teamMediumId.id;
  }
  if (this.isItem(memberId, 'member')) {
    memberId = memberId.id;
  }
  if (!(teamMediumId && this.isId(teamMediumId))) {
    throw new TSArgsError('teamsnap.setMediumAsMemberPhoto', 'must include a teamMediumId');
  }
  if (!(memberId && this.isId(memberId))) {
    throw new TSArgsError('teamsnap.setMediumAsMemberPhoto', 'must include a memberId');
  }
  params = {
    teamMediumId: teamMediumId,
    memberId: memberId
  };
  return this.collections.teamMedia.exec('setMediumAsMemberPhoto', params).pop().callback(callback);
};

exports.reorderTeamMedia = function(teamId, teamMediaIds, callback) {
  var params;
  if (!this.isId(teamId)) {
    throw new TSArgsError('teamsnap.reorderTeamMedia', '`teamId` must be provided');
  }
  if (!(teamMediaIds && Array.isArray(teamMediaIds))) {
    throw new TSArgsError('teamsnap.reorderTeamMedia', 'You must provide an array of ordered Team Medium IDs');
  }
  params = {
    teamId: teamId,
    sortedIds: teamMediaIds
  };
  return this.collections.teamMedia.exec('reorderTeamMedia', params).callback(callback);
};

exports.facebookShareTeamMedium = function(teamMediumId, facebookPageId, isSuppressedFromFeed, caption, callback) {
  var params;
  if (typeof facebookPageId === 'boolean') {
    callback = caption;
    caption = isSuppressedFromFeed;
    isSuppressedFromFeed = facebookPageId;
    facebookPageId = null;
  }
  if (typeof caption === 'function') {
    callback = caption;
  }
  if (facebookPageId != null) {
    facebookPageId = parseInt(facebookPageId);
  }
  if (this.isItem(teamMediumId, 'teamMedium')) {
    teamMediumId = teamMediumId.id;
  }
  if (!((isSuppressedFromFeed != null) && typeof isSuppressedFromFeed === 'boolean')) {
    throw new TSArgsError('teamsnap.facebookShareMedium', 'must include boolean isSuppressedFromFeed');
  }
  params = {
    teamMediumId: teamMediumId,
    facebookPageId: facebookPageId,
    caption: caption,
    isSuppressedFromFeed: isSuppressedFromFeed
  };
  return this.collections.teamMedia.exec('facebookShareTeamMedium', params).pop().callback(callback);
};
