// Generated by CoffeeScript 1.11.1
exports.loadDivisions = function(params, callback) {
  if (params == null) {
    params = {};
  }
  if (typeof params === 'function') {
    callback = params;
    params = {};
  }
  if (Object.keys(params).length) {
    return this.loadItems('division', params, callback);
  } else {
    return this.loadMe().then((function(_this) {
      return function(me) {
        params.userId = me.id;
        return _this.loadItems('division', params, callback);
      };
    })(this));
  }
};

exports.loadDivision = function(divisionId, callback) {
  if (!this.isId(divisionId)) {
    throw new TSArgsError('teamsnap.loadDivision', 'divisionId must be provided');
  }
  return this.loadItem('division', {
    id: divisionId
  }, callback);
};

exports.createDivision = function(data) {
  return this.createItem(data, {
    type: 'division',
    name: ''
  });
};

exports.saveDivision = function(division, callback) {
  var ref;
  if (!division) {
    throw new TSArgsError('teamsnap.saveDivision', "`division` must be provided");
  }
  if (!this.isItem(division, 'division')) {
    throw new TSArgsError('teamsnap.saveDivision', "`type` must be 'division'");
  }
  if (!((ref = division.name) != null ? ref.trim() : void 0)) {
    return this.reject('You must provide a name for the division.', 'name', callback);
  }
  return this.saveItem(division, callback);
};

exports.deleteDivision = function(division, callback) {
  if (!division) {
    throw new TSArgsError('teamsnap.deleteDivision', '`division` must be provided');
  }
  return this.deleteItem(division, callback);
};

exports.loadAncestorDivisions = function(divisionId, callback) {
  if (!this.isId(divisionId)) {
    throw new TSArgsError('teamsnap.loadAncestorDivisions', 'divisionId must be provided');
  }
  return this.collections.divisions.queryItems('ancestors', {
    id: divisionId
  }, callback);
};

exports.loadDescendantDivisions = function(divisionId, callback) {
  if (!this.isId(divisionId)) {
    throw new TSArgsError('teamsnap.loadDescendantDivisions', 'divisionId must be provided');
  }
  return this.collections.divisions.queryItems('descendants', {
    id: divisionId
  }, callback);
};

exports.loadChildDivisions = function(divisionId, callback) {
  if (!this.isId(divisionId)) {
    throw new TSArgsError('teamsnap.loadChildDivisions', 'divisionId must be provided');
  }
  return this.collections.divisions.queryItems('children', {
    id: divisionId
  }, callback);
};

exports.loadActiveTrialDivisions = function(userId, callback) {
  if (!this.isId(userId)) {
    throw new TSArgsError('teamsnap.loadActiveTrialsDivisions', 'userId must be provided');
  }
  return this.collections.divisions.queryItems('activeTrials', {
    userId: userId
  }, callback);
};
