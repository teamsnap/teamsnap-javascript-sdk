// Generated by CoffeeScript 1.11.1
exports.loadBroadcastEmailAttachments = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadBroadcastEmailAttachments', 'must provide a teamId or query parameters');
  }
  return this.loadItems('broadcastEmailAttachment', params, callback);
};

exports.deleteBroadcastEmailAttachment = function(broadcastEmailAttachment, callback) {
  if (!broadcastEmailAttachment) {
    throw new TSArgsError('teamsnap.deleteBroadcastEmailAttachment', '`broadcastEmailAttachment` must be provided');
  }
  return this.deleteItem(broadcastEmailAttachment, callback);
};

exports.uploadBroadcastEmailAttachment = function(broadcastEmailId, memberId, file, progressCallback, callback) {
  var params;
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!broadcastEmailId) {
    throw new TSArgsError('teamsnap.uploadBroadcastEmailAttachment', 'broadcastEmailId is required');
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadBroadcastEmailAttachment', 'must include `file` as type File', 'file is required');
  }
  if (!memberId) {
    throw new TSArgsError('teamsnap.uploadBroadcastEmailAttachment', 'memberId is required');
  }
  params = {
    broadcastEmailId: broadcastEmailId,
    file: file,
    memberId: memberId
  };
  return this.collections.broadcastEmailAttachments.file('uploadBroadcastEmailAttachment', params, progressCallback, callback);
};
