// Generated by CoffeeScript 1.11.1
exports.loadTeamPublicSites = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadTeamPublicSites', 'must provide a teamId or query parameters');
  }
  return this.loadItems('teamPublicSite', params, callback);
};

exports.loadTeamPublicSite = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadTeamPublicSite', 'must provide a teamId or query parameters');
  }
  return this.loadItem('teamPublicSite', params, callback);
};

exports.saveTeamPublicSite = function(teamPublicSite, callback) {
  if (!teamPublicSite) {
    throw new TSArgsError('teamsnap.saveTeamPublicSite', "`teamPublicSite` must be provided");
  }
  if (!this.isItem(teamPublicSite, 'teamPublicSite')) {
    throw new TSArgsError('teamsnap.saveTeamPublicSite', "`teamPublicSite.type` must be 'teamPublicSite'");
  }
  return this.saveItem(teamPublicSite, callback);
};

exports.uploadTeamPublicPhoto = function(teamPublicSiteId, file, callback) {
  var params;
  if (this.isItem(teamPublicSiteId, 'teamPublicSite')) {
    teamPublicSiteId = teamPublicSite.id;
  }
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!this.isId(teamPublicSiteId)) {
    throw new TSArgsError('teamsnap.uploadTeamPublicPhoto', 'must include `teamPublicSiteId`');
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadTeamPublicPhoto', 'must include `file` as type File');
  }
  params = {
    teamPublicSiteId: teamPublicSiteId,
    file: file
  };
  return this.collections.teamPublicSites.exec('uploadTeamPublicPhoto', params).pop().callback(callback);
};

exports.deleteTeamPublicPhoto = function(teamPublicSiteId, callback) {
  var params;
  if (!teamPublicSiteId) {
    throw new TSArgsError('teamsnap.deleteTeamPublicPhoto', "`teamPublicSiteId` must be provided");
  }
  if (this.isItem(teamPublicSiteId, 'teamPublicSite')) {
    teamPublicSiteId = teamPublicSite.id;
  }
  if (!this.isId(teamPublicSiteId)) {
    throw new TSArgsError('teamsnap.deleteTeamPublicPhoto', "`teamPublicSiteId` must be a valid id");
  }
  params = {
    teamPublicSiteId: teamPublicSiteId
  };
  return this.collections.teamPublicSites.exec('removeTeamPublicPhoto', params).callback(callback);
};

exports.validateSubdomain = function(subdomain, callback) {
  var params;
  if (!subdomain) {
    throw new TSArgsError('teamsnap.validateSubdomain', "`subdomain` must be provided");
  }
  params = {
    subdomain: subdomain
  };
  return this.collections.teamPublicSites.exec('validateSubdomain', params).callback(callback);
};
