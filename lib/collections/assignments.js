// Generated by CoffeeScript 1.11.1
exports.EVENT_SETS = ['future_games_and_events', 'future_games', 'future_events'];

exports.loadAssignments = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadAssignments', 'must provide a teamId or query parameters');
  }
  return this.loadItems('assignment', params, callback);
};

exports.createAssignment = function(data) {
  return this.createItem(data, {
    type: 'assignment',
    description: ''
  });
};

exports.saveAssignment = function(assignment, callback) {
  var ref;
  if (!assignment) {
    throw new TSArgsError('teamsnap.saveAssignment', "`assignment` must be provided");
  }
  if (!this.isItem(assignment, 'assignment')) {
    throw new TSArgsError('teamsnap.saveAssignment', "`assignment.type` must be 'assignment'");
  }
  if (!assignment.eventId) {
    return this.reject('You must choose an event.', 'eventId', callback);
  }
  if (!((ref = assignment.description) != null ? ref.trim() : void 0)) {
    return this.reject('You must provide a description for the assignment.', 'name', callback);
  }
  return this.saveItem(assignment, callback);
};

exports.deleteAssignment = function(assignment, callback) {
  if (!assignment) {
    throw new TSArgsError('teamsnap.deleteAssignment', '`assignment` must be provided');
  }
  return this.deleteItem(assignment, callback);
};

exports.getAssignmentSort = function(reverse) {
  return (function(_this) {
    return function(itemA, itemB) {
      var valueA, valueB;
      if (!_this.isItem(itemA, 'assignment') || !_this.isItem(itemB, 'assignment')) {
        valueA = itemA.type;
        valueB = itemB.type;
      } else {
        valueA = _this.memberName(itemA.member, reverse).toLowerCase();
        valueB = _this.memberName(itemB.member, reverse).toLowerCase();
      }
      if (typeof (valueA != null ? valueA.localeCompare : void 0) === 'function') {
        return valueA.localeCompare(valueB);
      } else {
        if (valueA === valueB) {
          return 0;
        } else if (!valueA && valueB) {
          return 1;
        } else if (valueA && !valueB) {
          return -1;
        } else if (valueA > valueB) {
          return 1;
        } else if (valueA < valueB) {
          return -1;
        } else {
          return 0;
        }
      }
    };
  })(this);
};

exports.sendAssignmentEmails = function(teamId, eventIds, message, sendingMemberId, callback) {
  var params;
  if (!this.isId(teamId)) {
    throw new TSArgsError('teamsnap.sendAssignmentEmails', "must provide a `teamId`");
  }
  if (!eventIds) {
    throw new TSArgsError('teamsnap.sendAssignmentEmails', "must provide `eventIds`");
  }
  if (this.isItem(eventIds)) {
    eventIds = eventIds.id;
  }
  if (!this.isId(sendingMemberId)) {
    throw new TSArgsError('teamsnap.sendAssignmentEmails', "must provide a `sendingMemberId`");
  }
  params = {
    teamId: teamId,
    eventIds: eventIds,
    message: message,
    sendingMemberId: sendingMemberId
  };
  return this.collections.assignments.exec('sendAssignmentEmails', params, callback);
};

exports.reorderAssignments = function(eventId, assignmentIds, callback) {
  var params;
  if (!this.isId(eventId)) {
    throw new TSArgsError('teamsnap.reorderAssignments', '`eventId` must be provided');
  }
  if (!(assignmentIds && Array.isArray(assignmentIds))) {
    throw new TSArgsError('teamsnap.reorderAssignments', 'You must provide an array of ordered Assignments IDs');
  }
  params = {
    eventId: eventId,
    sortedIds: assignmentIds
  };
  return this.collections.assignments.exec('reorderAssignments', params).callback(callback);
};

exports.createBulkAssignments = function(eventSet, description, teamId, createAsMemberId, callback) {
  var params;
  if (!(this.EVENT_SETS.indexOf(eventSet) > -1)) {
    throw new TSArgsError('teamsnap.createBulkAssignments', " `eventSet` must be one of the following: " + this.EVENT_SETS.toString() + ".");
  }
  if (!description.trim()) {
    return this.reject('You must provide a description for the assignments.', 'description', callback);
  }
  if (!teamId) {
    throw new TSArgsError('teamsnap.createBulkAssignments', '`teamId` must be provided.');
  }
  if (this.isItem(teamId, 'team')) {
    ({
      teamId: teamId.id
    });
  }
  if (!createAsMemberId) {
    throw new TSArgsError('teamsnap.createBulkAssignments', '`createAsMemberId` must be provided.');
  }
  if (this.isItem(createAsMemberId, 'member')) {
    ({
      createAsMemberId: createAsMemberId.id
    });
  }
  params = {
    eventSet: eventSet,
    description: description,
    teamId: teamId,
    createAsMemberId: createAsMemberId
  };
  return this.collections.assignments.exec('createBulkAssignments', params, callback);
};
