// Generated by CoffeeScript 1.11.1
exports.loadMemberFiles = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadMemberFiles', 'must provide a teamId or query parameters');
  }
  return this.loadItems('memberFile', params, callback);
};

exports.createMemberFile = function(data) {
  return this.createItem(data, {
    type: 'memberFile'
  });
};

exports.saveMemberFile = function(memberFile, callback) {
  if (!memberFile) {
    throw new TSArgsError('teamsnap.saveMemberFile', '`memberFile` must be provided');
  }
  if (!this.isItem(memberFile, 'memberFile')) {
    throw new TSArgsError('teamsnap.saveMemberFile', "`memberFile.type` must be 'memberFile'");
  }
  if (!memberFile.memberId) {
    return this.reject('You must choose a member.', 'memberId', callback);
  }
  return this.saveItem(memberFile, callback);
};

exports.deleteMemberFile = function(memberFile, callback) {
  if (!memberFile) {
    throw new TSArgsError('teamsnap.deleteMemberFile', '`memberFile` must be provided');
  }
  return this.deleteItem(memberFile, callback);
};

exports.uploadMemberFile = function(memberFileId, file, callback) {
  var params;
  if (this.isItem(memberFileId, 'memberFile')) {
    memberFileId = memberFileId.id;
  }
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!this.isId(memberFileId)) {
    throw new TSArgsError('teamsnap.uploadMemberFile', 'must include `memberFileId`');
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadMemberFile', 'must include `file` as type File');
  }
  params = {
    memberFileId: memberFileId,
    file: file
  };
  return this.collections.memberFiles.exec('uploadMemberFile', params).pop().callback(callback);
};
