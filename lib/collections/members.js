// Generated by CoffeeScript 1.11.1
exports.loadMembers = function(params, callback) {
  if (this.isId(params)) {
    params = {
      teamId: params
    };
  } else if (!(params && typeof params === 'object')) {
    throw new TSArgsError('teamsnap.loadMembers', 'must provide a teamId or query parameters');
  }
  return this.loadItems('member', params, callback);
};

exports.createMember = function(data) {
  return this.createItem(data, {
    type: 'member'
  });
};

exports.saveMember = function(member, callback) {
  var ref;
  if (!member) {
    throw new TSArgsError('teamsnap.saveMember', "`member` must be provided");
  }
  if (!this.isItem(member, 'member')) {
    throw new TSArgsError('teamsnap.saveMember', "`type` must be 'member'");
  }
  if (!member.teamId) {
    return this.reject('You must choose a team.', 'teamId', callback);
  }
  if (!((ref = member.firstName) != null ? ref.trim() : void 0)) {
    return this.reject('You must provide a first name for the member.', 'name', callback);
  }
  return this.saveItem(member, callback);
};

exports.deleteMember = function(member, callback) {
  if (!member) {
    throw new TSArgsError('teamsnap.deleteMember', '`member` must be provided');
  }
  return this.deleteItem(member, callback);
};

exports.loadPersonas = function(userId, callback) {
  var params;
  if (this.isItem(userId, 'user')) {
    userId = userId.id;
  }
  if (!userId) {
    throw new TSArgsError('teamsnap.loadPersonas', "`userId` must be provided");
  }
  params = {
    userId: userId
  };
  return this.collections.members.queryItems('personas', params, callback);
};

exports.uploadMemberPhoto = function(memberId, file, callback) {
  var params;
  if (this.isItem(memberId, 'member')) {
    memberId = memberId.id;
  }
  if (typeof FormData === 'undefined') {
    this.reject('Your browser does not support the new file upload APIs.', 'file', callback);
  }
  if (!this.isId(memberId)) {
    throw new TSArgsError('teamsnap.deleteMemberPhoto', "`memberId` must be a valid id");
  }
  if (!(file instanceof File)) {
    throw new TSArgsError('teamsnap.uploadMemberFile', 'must include `file` as type File');
  }
  params = {
    memberId: memberId,
    file: file
  };
  return this.collections.members.exec('uploadMemberPhoto', params).pop().callback(callback);
};

exports.removeMemberPhoto = function(memberId, callback) {
  var params;
  if (this.isItem(memberId, 'member')) {
    memberId = memberId.id;
  }
  if (!this.isId(memberId)) {
    throw new TSArgsError('teamsnap.deleteMemberPhoto', "`memberId` must be a valid id");
  }
  params = {
    memberId: memberId
  };
  return this.collections.members.exec('removeMemberPhoto', params).pop().callback(callback);
};

exports.generateMemberThumbnail = function(memberId, x, y, width, height, callback) {
  var params;
  if (this.isItem(memberId, 'member')) {
    memberId = memberId.id;
  }
  if (!((memberId != null) && (x != null) && (y != null) && (width != null) && (height != null))) {
    throw new TSArgsError('teamsnap.generateThumbnail', "`memberId`, `x`, `y`, `width`, and `height` are all required");
  }
  if (!this.isId(memberId)) {
    throw new TSArgsError('teamsnap.generateMemberThumbnail', "`memberId` must be a valid id");
  }
  params = {
    memberId: memberId,
    x: x,
    y: y,
    width: width,
    height: height
  };
  return this.collections.members.exec('generateMemberThumbnail', params).pop().callback(callback);
};

exports.disableMember = function(memberId, callback) {
  var params;
  if (this.isItem(memberId, 'member')) {
    memberId = memberId.id;
  }
  if (!this.isId(memberId)) {
    throw new TSArgsError('teamsnap.disableMember', "`memberId` must be a valid id");
  }
  params = {
    memberId: memberId
  };
  return this.collections.members.exec('disableMember', params).pop().callback(callback);
};

exports.divisionLoadMembers = function(params, callback) {
  if (!params.divisionId) {
    throw new TSArgsError('teamsnap.divisionLoadMembers', "`divisionId` must be provided");
  }
  return this.collections.members.queryItems('divisionSearch', params, callback);
};

exports.divisionAdvancedLoadMembers = function(params, callback) {
  if (!params.divisionId) {
    throw new TSArgsError('teamsnap.divisionAdvancedLoadMembers', "`divisionId` must be provided");
  }
  return this.collections.members.queryItems('advancedDivisionSearch', params, callback);
};

exports.memberName = function(member, reverse, forSort) {
  if (!member) {
    return '';
  }
  if (reverse && (member.firstName && member.lastName || forSort)) {
    return member.lastName + ', ' + member.firstName;
  }
  return [member.firstName || '', member.lastName || ''].join(' ').trim();
};

exports.getMemberSort = function(reverse) {
  return (function(_this) {
    return function(itemA, itemB) {
      var valueA, valueB;
      if (!_this.isItem(itemA, 'member') || !_this.isItem(itemB, 'member')) {
        valueA = itemA.type;
        valueB = itemB.type;
      } else {
        valueA = _this.memberName(itemA, reverse, true).toLowerCase();
        valueB = _this.memberName(itemB, reverse, true).toLowerCase();
      }
      if (typeof (valueA != null ? valueA.localeCompare : void 0) === 'function') {
        return valueA.localeCompare(valueB);
      } else {
        if (valueA === valueB) {
          return 0;
        } else if (!valueA && valueB) {
          return 1;
        } else if (valueA && !valueB) {
          return -1;
        } else if (valueA > valueB) {
          return 1;
        } else if (valueA < valueB) {
          return -1;
        } else {
          return 0;
        }
      }
    };
  })(this);
};

exports.canEditTeam = function(member, team) {
  if (!(member && team)) {
    return false;
  }
  return (member.isManager || member.isOwner) && (!team.isArchivedSeason || member.isOwner);
};

exports.canEditItem = function(member, team, item) {
  if (!(member && team && this.isItem(item))) {
    return false;
  }
  if (item.readOnly) {
    return false;
  }
  if (item.type === 'member' && item.isOwner && !member.isOwner) {
    return false;
  }
  if (teamsnap.canEditTeam(member, team)) {
    return true;
  }
  if (team.isArchivedSeason) {
    return false;
  }
  if (this.isItem(item, 'member')) {
    return item.href === member.href;
  } else {
    return item.links.member.href === member.href;
  }
};

exports.importMembersFromTeam = function(memberIds, teamId, sendInvites, callback) {
  var params;
  if (!memberIds) {
    throw new TSArgsError('teamsnap.importMembersFromTeam', 'must include `memberIds`');
  }
  if (!this.isItem(teamId)) {
    throw new TSArgsError('teamsnap.importMembersFromTeam', "must provide a teamId");
  }
  if (this.isItem(teamId)) {
    teamId = teamId.id;
  }
  if (typeof sendInvites === 'function') {
    callback = sendInvites;
  }
  params = {
    sourceMemberIds: memberIds,
    destinationTeamId: teamId,
    sendInvites: sendInvites
  };
  return this.collections.members.exec('importFromTeam', params, callback);
};

exports.loadImportableMembers = function(userId, includeArchivedTeams, callback) {
  var params;
  if (!userId) {
    throw new TSArgsError('teamsnap.loadImportableMembers', "must provide a userId");
  }
  if (typeof includeArchivedTeams === 'function') {
    callback = includeArchivedTeams;
  }
  params = {
    userId: userId,
    includeArchivedTeams: includeArchivedTeams
  };
  return this.collections.members.queryItems('importableMembers', params, callback);
};

exports.bulkDeleteMembers = function(members, callback) {
  if (Array.isArray(members)) {
    if (members.length === 0) {
      throw new TSArgsError('teamsnap.bulkDeleteMembers', 'The array of members to be deleted is empty.');
    } else if (members.every((function(_this) {
      return function(member) {
        return _this.isItem(member, 'member');
      };
    })(this))) {
      members = {
        memberId: members.map(function(member) {
          return member.id;
        })
      };
    } else {
      throw new TSArgsError('teamsnap.bulkDeleteMembers', 'Must provide an `array` of member `ids` or `member` objects');
    }
  } else if (typeof members === 'object' && this.isItem(members, 'member')) {
    members = {
      memberId: members.id
    };
  } else {
    throw new TSArgsError('teamsnap.bulkDeleteMembers', 'Must provide an `array` of members, or a `member` object');
  }
  return this.collections.members.exec('bulkDelete', members).callback(callback);
};

exports.moveMemberToTeam = function(params, callback) {
  if (!params.member) {
    throw new TSArgsError('teamsnap.moveMemberToTeam', 'params must include `member`');
  }
  if (!params.divisionId) {
    throw new TSArgsError('teamsnap.moveMemberToTeam', 'params must include `divisionId`');
  }
  if (Array.isArray(params.member)) {
    if (params.member.length === 0) {
      throw new TSArgsError('teamsnap.moveMemberToTeam', 'member in params is empty.');
    } else if (params.member.every((function(_this) {
      return function(member) {
        return _this.isItem(member, 'member');
      };
    })(this))) {
      params.memberId = params.member.map(function(member) {
        return member.id;
      });
    } else {
      throw new TSArgsError('teamsnap.moveMemberToTeam', 'Must provide an `array` of member objects or a `member` object for member');
    }
  } else if (this.isItem(params.member, 'member')) {
    params.memberId = params.member.id;
  } else {
    throw new TSArgsError('teamsnap.moveMemberToTeam', 'Must provide an `array` of member objects or `member` objects for member');
  }
  if (this.isItem(params.divisionId, 'division')) {
    params.divisionId = params.divisionId.id;
  }
  if (this.isItem(params.teamId, 'team')) {
    params.teamId = params.teamId.id;
  }
  return this.collections.members.exec('moveMember', params).callback(callback);
};
