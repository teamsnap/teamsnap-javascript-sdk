// Generated by CoffeeScript 1.11.1
var Item, ScopedCollection, TeamSnap, add, linking, loadCollections, mergeDefaults, promises, ref, urlExp,
  hasProp = {}.hasOwnProperty;

TeamSnap = require('./teamsnap').TeamSnap;

promises = require('./promises');

loadCollections = require('./loadCollections');

ref = require('./model'), Item = ref.Item, ScopedCollection = ref.ScopedCollection;

urlExp = /^https?:\/\//;

TeamSnap.prototype.loadCollections = function(cachedCollections, callback) {
  if (typeof cachedCollections === 'function') {
    callback = cachedCollections;
    cachedCollections = null;
  }
  return loadCollections(this.request, cachedCollections).then((function(_this) {
    return function(colls) {
      var ref1, ref2, ref3, ref4;
      _this.collections = {};
      Object.keys(colls).forEach(function(name) {
        return _this.collections[name] = new ScopedCollection(_this.request, colls[name]);
      });
      _this.apiVersion = colls.root.version;
      _this.plans = Item.fromArray(_this.request, ((ref1 = colls.plans.items) != null ? ref1.slice() : void 0) || []);
      _this.smsGateways = Item.fromArray(_this.request, ((ref2 = colls.smsGateways.items) != null ? ref2.slice() : void 0) || []);
      _this.sports = Item.fromArray(_this.request, ((ref3 = colls.sports.items) != null ? ref3.slice() : void 0) || []);
      _this.timeZones = Item.fromArray(_this.request, ((ref4 = colls.timeZones.items) != null ? ref4.slice() : void 0) || []);
      return _this;
    };
  })(this)).callback(callback);
};

TeamSnap.prototype.reloadCollections = function(callback) {
  loadCollections.clear();
  return this.loadCollections(callback);
};

TeamSnap.prototype.loadItems = function(type, params, callback) {
  var collection;
  if (!this.hasType(type)) {
    throw new TSArgsError('teamsnap.load*', 'must provide a valid `type`');
  }
  collection = this.getCollectionForItem(type);
  return collection.queryItems('search', params, callback);
};

TeamSnap.prototype.loadItem = function(type, params, callback) {
  var collection;
  if (!this.hasType(type)) {
    throw new TSArgsError('teamsnap.load*', 'must provide a valid `type`');
  }
  collection = this.getCollectionForItem(type);
  return collection.queryItem('search', params, callback);
};

TeamSnap.prototype.createItem = function(properties, defaults) {
  var collection;
  if (!properties) {
    properties = defaults;
    defaults = null;
  }
  if (defaults) {
    properties = mergeDefaults(properties, defaults);
  }
  if (!this.isItem(properties)) {
    throw new TSArgsError('teamsnap.create*', 'must include a valid `type`');
  }
  if (!properties.links) {
    collection = this.getCollectionForItem(properties.type);
    properties.links = collection.links.cloneEmpty();
  }
  return Item.create(this.request, properties);
};

TeamSnap.prototype.saveItem = function(item, callback) {
  var collection;
  if (!this.isItem(item)) {
    throw new TSArgsError('teamsnap.save*', 'must include a valid `type`');
  }
  collection = this.getCollectionForItem(item);
  return collection.save(item, callback);
};

TeamSnap.prototype.deleteItem = function(item, params, callback) {
  if (typeof item === 'string' && urlExp.test(item)) {
    item = {
      href: item
    };
  }
  if (!(typeof (item != null ? item.href : void 0) === 'string' && urlExp.test(item.href))) {
    throw new TSArgsError('teamsnap.delete*', 'item must have a valid href to delete');
  }
  if (!(item instanceof Item)) {
    item = Item.create(this.request, item);
  }
  return item["delete"](params, callback);
};

TeamSnap.prototype.copyItem = function(item) {
  var collection;
  collection = this.getCollectionForItem(item);
  return item.copy(collection.template);
};

TeamSnap.prototype.getNameSort = function() {
  return function(itemA, itemB) {
    var valueA, valueB;
    if (itemA.type !== itemB.type) {
      valueA = itemA.type;
      valueB = itemB.type;
    } else if (typeof itemA.name === 'string' && typeof itemB.name === 'string') {
      valueA = itemA.name.toLowerCase();
      valueB = itemB.name.toLowerCase();
    } else {
      if (itemA.createdAt && itemB.createdAt) {
        valueA = itemA.createdAt;
        valueB = itemB.createdAt;
      } else {
        valueA = itemA.id;
        valueB = itemB.id;
      }
    }
    if (typeof (valueA != null ? valueA.localeCompare : void 0) === 'function') {
      return valueA.localeCompare(valueB);
    } else {
      if (valueA === valueB) {
        return 0;
      } else if (!valueA && valueB) {
        return 1;
      } else if (valueA && !valueB) {
        return -1;
      } else if (valueA > valueB) {
        return 1;
      } else if (valueA < valueB) {
        return -1;
      } else {
        return 0;
      }
    }
  };
};

TeamSnap.prototype.getDefaultSort = function() {
  return function(itemA, itemB) {
    var valueA, valueB;
    if (itemA.type !== itemB.type) {
      valueA = itemA.type;
      valueB = itemB.type;
    } else {
      if (itemA.createdAt && itemB.createdAt) {
        valueA = itemA.createdAt;
        valueB = itemB.createdAt;
      } else {
        valueA = itemA.id;
        valueB = itemB.id;
      }
    }
    if (typeof (valueA != null ? valueA.localeCompare : void 0) === 'function') {
      return valueA.localeCompare(valueB);
    } else {
      if (valueA === valueB) {
        return 0;
      } else if (!valueA && valueB) {
        return 1;
      } else if (valueA && !valueB) {
        return -1;
      } else if (valueA > valueB) {
        return 1;
      } else if (valueA < valueB) {
        return -1;
      } else {
        return 0;
      }
    }
  };
};

TeamSnap.prototype.getCollectionForItem = function(item) {
  var collectionName, type;
  if (!this.collections) {
    throw new TSError('You must auth() and loadCollections() before using any load*, save*, create*, or delete* methods.');
  }
  type = typeof item === 'string' ? item : item.type;
  collectionName = this.getPluralType(type);
  return this.collections[collectionName];
};

TeamSnap.prototype.isId = function(value) {
  return typeof value === 'string' || typeof value === 'number';
};

TeamSnap.prototype.isItem = function(value, type) {
  return this.hasType(value != null ? value.type : void 0) && (!type || value.type === type);
};

TeamSnap.prototype.reject = function(msg, field, callback) {
  return promises.reject(new TSValidationError(msg, field)).callback(callback);
};

add = function(module) {
  var key, results, value;
  results = [];
  for (key in module) {
    value = module[key];
    results.push(TeamSnap.prototype[key] = value);
  }
  return results;
};

add(require('./types'));

linking = require('./linking');

TeamSnap.prototype.linkItems = linking.linkItems;

TeamSnap.prototype.unlinkItems = linking.unlinkItems;

add(require('./persistence'));

add(require('./collections/teams'));

add(require('./collections/advertisements'));

add(require('./collections/assignments'));

add(require('./collections/availabilities'));

add(require('./collections/batchInvoices'));

add(require('./collections/broadcastAlerts'));

add(require('./collections/broadcastEmails'));

add(require('./collections/broadcastEmailAttachments'));

add(require('./collections/contactEmailAddresses'));

add(require('./collections/contactPhoneNumbers'));

add(require('./collections/contacts'));

add(require('./collections/customData'));

add(require('./collections/customFields'));

add(require('./collections/leagueCustomData'));

add(require('./collections/leagueCustomFields'));

add(require('./collections/divisionAggregates'));

add(require('./collections/divisionEvents'));

add(require('./collections/divisionLocations'));

add(require('./collections/divisionMembers'));

add(require('./collections/divisionMembersPreferences'));

add(require('./collections/divisionStores'));

add(require('./collections/divisionTeamStandings'));

add(require('./collections/divisions'));

add(require('./collections/divisionsPreferences'));

add(require('./collections/events'));

add(require('./collections/eventStatistics'));

add(require('./collections/facebookPages'));

add(require('./collections/forecasts'));

add(require('./collections/forumPosts'));

add(require('./collections/forumSubscriptions'));

add(require('./collections/forumTopics'));

add(require('./collections/invoices'));

add(require('./collections/invoiceLineItems'));

add(require('./collections/invoiceTransactions'));

add(require('./collections/leagueRegistrantDocuments'));

add(require('./collections/locations'));

add(require('./collections/memberAssignments'));

add(require('./collections/memberBalances'));

add(require('./collections/memberEmailAddresses'));

add(require('./collections/memberFiles'));

add(require('./collections/memberLinks'));

add(require('./collections/memberPayments'));

add(require('./collections/memberPhoneNumbers'));

add(require('./collections/memberPhotos'));

add(require('./collections/membersPreferences'));

add(require('./collections/memberStatistics'));

add(require('./collections/memberRegistrationSignups'));

add(require('./collections/members'));

add(require('./collections/messageData'));

add(require('./collections/messages'));

add(require('./collections/opponents'));

add(require('./collections/opponentsResults'));

add(require('./collections/partnerUserPreferences'));

add(require('./collections/partnersPreferences'));

add(require('./collections/paymentNotes'));

add(require('./collections/plans'));

add(require('./collections/sponsors'));

add(require('./collections/sports'));

add(require('./collections/registrationFormLineItemOptions'));

add(require('./collections/registrationFormLineItems'));

add(require('./collections/registrationForms'));

add(require('./collections/statisticAggregates'));

add(require('./collections/statistics'));

add(require('./collections/statisticData'));

add(require('./collections/statisticGroups'));

add(require('./collections/teamFees'));

add(require('./collections/teamMedia'));

add(require('./collections/teamMediumComments'));

add(require('./collections/teamMediaGroups'));

add(require('./collections/teamNames'));

add(require('./collections/teamPublicSites'));

add(require('./collections/teamsPaypalPreferences'));

add(require('./collections/teamPhotos'));

add(require('./collections/teamsPreferences'));

add(require('./collections/teamsResults'));

add(require('./collections/teamStatistics'));

add(require('./collections/teamStores'));

add(require('./collections/trackedItems'));

add(require('./collections/trackedItemStatuses'));

add(require('./collections/users'));

mergeDefaults = function(properties, defaults) {
  var key, obj, value;
  obj = {};
  for (key in properties) {
    if (!hasProp.call(properties, key)) continue;
    value = properties[key];
    if (!(typeof value === 'function' || key.charAt(0) === '_')) {
      obj[key] = value;
    }
  }
  for (key in defaults) {
    if (!hasProp.call(defaults, key)) continue;
    value = defaults[key];
    if (!(typeof value === 'function' || properties.hasOwnProperty(key))) {
      obj[key] = value;
    }
  }
  return obj;
};
